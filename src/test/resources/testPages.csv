26e3cfd86d89a511,A.NET,https://en.wikipedia.org/wiki/A_Sharp_(.NET),"A Sharp (.NET) From Wikipedia the free encyclopedia Jump to navigation Jump to search Programming language port The correct title of this article is A# (.NET). The substitution of the # is due to technical restrictions. This article relies too much on references to primary sources. Please improve this by adding secondary or tertiary sources. (October 2011) (Learn how and when to remove this template message) A#Designed byDr. Martin C. Carlisle Lt Col Ricky Sward Maj Jeff HumphriesDeveloperAdaCoreFirst appeared2004; 17 years ago (2004)PlatformCommon Language InfrastructureOSCross-platformLicenseGNU General Public LicenseWebsitewww.asharp.martincarlisle.com A# is a port of the Ada programming language to the Microsoft .NET platform. A# is freely distributed by the Department of Computer Science at the United States Air Force Academy as a service to the Ada community under the terms of the GNU General Public License. AdaCore has taken over this development and announced ""GNAT for .NET"" which is a fully supported .NET product with all of the features of A# and more.[1] References[edit] ^ Cited by Martin Carlisle (USAFA) http://asharp.martincarlisle.com/ and see also http://www.adacore.com/2007/09/10/adacore-first-to-bring-true-net-integration-to-ada/ Archived 2007-10-28 at the Wayback Machine External links[edit] A# for .NET Ada Sharp .NET Programming environment vteCommon Language InfrastructureArchitecture Application domain Code Access Security Common Intermediate Language (CIL) CIL instructions Common Type System (CTS) Platform Invocation Services (P/Invoke) Virtual Execution System (VES) Components Assembly Delegate Global Assembly Cache (GAC) Manifest Metadata StandardLibrariesKernel Profile Base Class Library (BCL) Runtime Infrastructure Library Compact Profile Network Library Reflection Library XML Library Extended Array Library Extended Numerics Library Parallel Library Vararg Library ImplementationsMicrosoft .NET .NET Framework .NET Compact Framework .NET Micro Framework Other Mono Portable.NET LanguagesMajor languages C# Visual Basic .NET F# PowerShell Other Axum A# Boo Cobra C++/CLI IronScheme IronPython IronRuby JScript .NET J# Nemerle Oxygene Phalanger Q# Scala Microsoft Small Basic Comparison C# and Java C# and Visual Basic .NET Java and .NET platforms Visual Basic and Visual Basic .NET Organizations .NET Foundation DotGNU Microsoft Xamarin This programming-language-related article is a stub. You can help Wikipedia by expanding it.vte Retrieved from ""https://en.wikipedia.org/w/index.php?title=A_Sharp_(.NET)&oldid=932297712"" Categories: Ada (programming language).NET programming languagesProgramming language topic stubsHidden categories: Webarchive template wayback linksArticles with short descriptionShort description matches WikidataRestricted titlesArticles lacking reliable references from October 2011All articles lacking reliable referencesAll stub articles",38a860232a4796f3,b06b5bd1379ce3aa,646b183821ba160a,8c3258167b98c193,7c6b0d4b5160ecfe,1d65a0460027614c,4e25c329bcd31403,8b0048a0462eaef0,f6099e4387c3a8fe,5e5441b709c2e1c6,3bcb5e94ed03476e,1438a36252c6ca89,9678c39fee342465,0c6c76b0d0c09976
9316632bd3f17e5f,A-0 System,https://en.wikipedia.org/wiki/A-0_System,"A-0 System From Wikipedia the free encyclopedia Jump to navigation Jump to search Programming language The A-0 system (Arithmetic Language version 0) written by Grace Murray Hopper [1] in 1951 and 1952 for the UNIVAC I was an early[2] compiler related tool developed for electronic computers.[3] The A-0 functioned more as a loader or linker than the modern notion of a compiler. A program was specified as a sequence of subroutines and arguments. The subroutines were identified by a numeric code and the arguments to the subroutines were written directly after each subroutine code. The A-0 system converted the specification into machine code that could be fed into the computer a second time to execute the said program. The A-0 system was followed by the A-1 A-2 [4] A-3 (released as ARITH-MATIC) AT-3 (released as MATH-MATIC) and B-0 (released as FLOW-MATIC). The A-2 system was developed at the UNIVAC division of Remington Rand in 1953 and released to customers by the end of that year.[5] Customers were provided the source code for A-2 and invited to send their improvements back to UNIVAC. Thus A-2 could be considered an example of the result of an early philosophy similar to free and open-source software.[6] Contents 1 See also 2 Notes 3 External links 4 References See also[edit] History of compiler construction Notes[edit] ^ Ridgway Richard (1952). ""Compiling routines"". Proceeding ACM '52 Proceedings of the 1952 ACM National Meeting (Toronto). ^ ""List of early compilers and assemblers"". ^ Hopper ""Keynote Address"" Sammet pg. 12 ^ *""PAPERS: Automatic Programming: The A 2 Compiler System -- Part I"" (PDF). Computers and Automation. 4 (9): 25–29. Sep 1955. Retrieved 2020-09-05. ""PAPERS: Automatic Programming: The A 2 Compiler System -- Part II"" (PDF). Computers and Automation. 4 (10): 15–27. Oct 1955. Retrieved 2020-09-05. ^ Ceruzzi Paul (1998). A History of Modern Computing. The MIT Press. ^ ""Heresy & Heretical Open Source: A Heretic's Perspective"". External links[edit] Proceedings of the 1954 MIT Summer Session on ""Digital Computers - Advanced Coding Techniques section 7 - A2 Compiler and Associated Routines for use with Univac References[edit] Hopper Grace (May 1952). ""The Education of a Computer"" (PDF). Proceedings of the Association for Computing Machinery Conference (Pittsburgh) May 1952. pp. 243–249. doi:10.1145/609784.609818. Hopper Grace (16 February 1955). ""Automatic Coding for Digital Computers"" (PDF). High Speed Computer Conference (Louisiana State University) February 1955. Remington Rand. Hopper Grace. ""Keynote Address"". Proceedings of the ACM SIGPLAN History of Programming Languages (HOPL) conference. Ridgway Richard K. (1952). ""Compiling Routines"". Proceedings of the 1952 ACM national meeting (Toronto) ACM '52. Sammet Jean (1969). Programming Languages: History and Fundamentals. Prentice-Hall. pp. g. 12. Retrieved from ""https://en.wikipedia.org/w/index.php?title=A-0_System&oldid=996447120"" Categories: Procedural programming languagesProgramming languages created in 1951Hidden categories: Articles with short descriptionShort description is different from Wikidata",d098a2b2cdc8706c,e90b11bb2e0b601a,79b9a0a776f5396b
dbdfed4f2a476b3d,A+,https://en.wikipedia.org/wiki/A%2B_(programming_language),"A+ (programming language) From Wikipedia the free encyclopedia Jump to navigation Jump to search A+ParadigmArrayDesigned byArthur WhitneyDeveloperMorgan StanleyFirst appeared1988; 33 years ago (1988)Stable release4.22-1 / March 27 2008; 12 years ago (2008-03-27) Typing disciplineDynamic strongLicenseGNU General Public LicenseFilename extensions.. .+ .a .m[1]Websitewww.aplusdev.orgMajor implementationsA+Influenced byAPLInfluencedK A+ is an array programming language descended from the programming language A which in turn was created to replace APL in 1988.[2] Arthur Whitney developed the A portion of A+ while other developers at Morgan Stanley extended it adding a graphical user interface and other language features. A+ is a high-level interactive interpreted language designed for numerically intensive applications especially those found in financial applications. A+ runs on many Unix variants including Linux. It is free and open source software released under a GNU General Public License. A+ provides an extended set of functions and operators a graphical user interface with automatic synchronizing of widgets and variables asynchronous executing of functions associated with variables and events dynamic loading of user compiled subroutines and other features. A newer graphical user interface has not yet been ported to all supported platforms The A+ language implements the following changes to the APL language: an A+ function may have up to nine formal parameters A+ code statements are separated by semicolons so a single statement may be divided into two or more physical lines The explicit result of a function or operator is the result of the last statement executed A+ implements an object called a dependency which is a global variable (the dependent variable) and an associated definition that is like a function with no arguments. Values can be explicitly set and referenced in exactly the same ways as for a global variable but they can also be set through the associated definition. Interactive A+ development is primarily done in the Xemacs editor through extensions to the editor. Because A+ code uses the original APL symbols displaying A+ requires a font with those special characters; a font named kapl is provided on the web site for that purpose. Arthur Whitney went on to create a proprietary array language named K. Like J K omits the APL character set. It lacks some of the perceived complexities of A+ such as the existence of statements and two different modes of syntax. References[edit] ^ ""A+ Reference: Appendix: Quick Reference"". Retrieved 2020-02-06. ^ ""A+: History of A+"". www.aplusdev.org. Retrieved 2019-01-18. External links[edit] Official website A+ Development.org vteAPL programming languageFeatures APL syntax and symbols Direct function (dfn) EBCDIC code page Iverson bracket Rank Shared Variables ImplementationsMajor Dyalog APL IBM APL2 APL2000 SHARP APL APLX NARS2000 Dialects A+ APLNext ELI GNU APL J K Q; kdb+ LYaPAS Polymorphic Programming Language (PPL) CommunityProfessionalassociations Association for Computing Machinery: SIGAPL British APL Association OrganizationsBusiness Analogic Corporation CompuServe Digital Equipment Corporation (DEC) DNA Systems Dyalog Ltd. IBM I. P. Sharp Associates Kx Systems Micro Computer Machines (MCM) Science Research Associates Scientific Time Sharing Corporation (STSC) Soliton Incorporated Telecompute Integrated Systems Inc. Time Sharing Resources (TSR) Education Carnegie Mellon University (CMU) University of Maryland People Phil Abrams Bob Bernecky Larry Breed Charles Brenner Fred Brooks Jim Brown Adin Falkoff Patrick E. Hagerty Herbert Hellerman Roger Hui Kenneth E. Iverson Dick Lathwell Eugene McDonnell Robert Metzger Roger Moore Alan Perlis John Scholes J. Henri Schueler Bob Smith Edward H. Sussenguth Jr. Arthur Whitney William Yerazunis Rodnay Zaks Other Iverson Award Category Commons Retrieved from ""https://en.wikipedia.org/w/index.php?title=A%2B_(programming_language)&oldid=998200389"" Categories: APL programming language familyArray programming languagesData-centric programming languagesHidden categories: Official website different in Wikidata and Wikipedia",7eefd3a460ff53bd,8d20b5d729895740,d80b770af5292b61,93f3c636d008a1d4,2107a7948ca48e8f,e5cebc448bde93be
d9b660ed4dddb0a9,ABAP,https://en.wikipedia.org/wiki/ABAP,"ABAP From Wikipedia the free encyclopedia Jump to navigation Jump to search For other uses see ABAP (disambiguation). This article has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages) This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources: ""ABAP"" – news · newspapers · books · scholar · JSTOR (July 2011) (Learn how and when to remove this template message) This article is written like a manual or guidebook. Please help rewrite this article from a descriptive neutral point of view and remove advice or instruction. (November 2016) (Learn how and when to remove this template message) (Learn how and when to remove this template message) ABAP/4ParadigmObject-oriented structured imperativeDesigned bySAP SEFirst appeared1983; 38 years ago (1983)Stable release7.55[1] / September 2 2020; 4 months ago (2020-09-02)[2] Typing disciplineStatic strong safe nominativeOSCross-platformWebsitescn.sap.com/community/abapMajor implementationsSAP R/2 SAP R/3 SAP S/4HANAInfluenced byObjective-C [citation needed] COBOL [citation needed] SQL[citation needed] ABAP (Advanced Business Application Programming originally Allgemeiner Berichts-Aufbereitungs-Prozessor German for ""general report creation processor""[3]) is a high-level programming language created by the German software company SAP SE. It is extracted from the base computing languages Java C C++ and Python. It is currently positioned alongside Java as the language for programming the SAP NetWeaver Application Server which is part of the SAP NetWeaver platform for building business applications. Contents 1 Introduction 2 ABAP runtime environment 2.1 SAP systems and landscapes 2.2 Software layers 3 Transactions 4 Types of ABAP programs 5 Development environment 5.1 ABAP Workbench 5.2 ABAP Development Tools 6 ABAP Dictionary 7 ABAP syntax 7.1 Hello world 7.2 Chained statements 7.3 Comments 7.4 Spaces 7.5 ABAP statements 8 Data types and variables 8.1 Explicitly typed declaration 8.2 Inline declaration 9 ABAP Objects 10 CDS Views 10.1 Features 11 Internal tables in ABAP 12 History 13 See also 14 References 15 External links Introduction[edit] ABAP is one of the many application-specific fourth-generation languages (4GLs) first developed in the 1980s. It was originally the report language for SAP R/2 a platform that enabled large corporations to build mainframe business applications for materials management and financial and management accounting. ABAP establish integration between independent software. ABAP used to be an abbreviation of Allgemeiner Berichts-Aufbereitungs-Prozessor German for ""generic report preparation processor"" but was later[when?] renamed to the English Advanced Business Application Programming. ABAP was one of the first languages to include the concept of Logical Databases (LDBs) which provides a high level of abstraction from the basic database level(s) which supports every platform language and units. The ABAP language was originally used by developers to develop the SAP R/3 platform. It was also intended to be used by SAP customers to enhance SAP applications – customers can develop custom reports and interfaces with ABAP programming. The language was geared towards more technical customers with programming experience. ABAP remains as the language for creating programs for the client–server R/3 system which SAP first released in 1992. As computer hardware evolved through the 1990s more and more of SAP's applications and systems were written in ABAP. By 2001 all but the most basic functions were written in ABAP. In 1999 SAP released an object-oriented extension to ABAP called ABAP Objects along with R/3 release 4.6. SAP's current development platform NetWeaver supports both ABAP and Java. ABAP has an abstraction between the business applications the operating system and database. This ensures that applications do not depend directly upon a specific server or database platform and can easily be ported from one platform to another. SAP Netweaver currently runs on UNIX (AIX HP-UX Solaris Linux) Microsoft Windows i5/OS on IBM System i (formerly iSeries AS/400) and z/OS on IBM System z (formerly zSeries S/390). Supported databases are HANA SAP ASE (formerly Sybase) IBM DB2 Informix MaxDB Oracle and Microsoft SQL Server (support for Informix was discontinued in SAP Basis release 7.00).[4] ABAP runtime environment[edit] All ABAP programs reside inside the SAP database. They are not stored in separate external files like Java or C++ programs. In the database all ABAP code exists in two forms: source code which can be viewed and edited with the ABAP Workbench tools; and generated code a binary representation somewhat comparable with Java bytecode. ABAP programs execute under the control of the runtime system which is part of the SAP kernel. The runtime system is responsible for processing ABAP statements controlling the flow logic of screens and responding to events (such as a user clicking on a screen button); in this respect it can be seen as a Virtual Machine comparable with the Java VM. A key component of the ABAP runtime system is the Database Interface which turns database-independent ABAP statements (""Open SQL"") into statements understood by the underlying DBMS (""Native SQL""). The database interface handles all the communication with the relational database on behalf of ABAP programs; It also contains extra features such as buffering of tables and frequently accessed data in the local memory of the application server. SAP systems and landscapes[edit] All SAP data exists and all SAP software runs in the context of a SAP system. A system consists of a central relational database and one or more application (""instances"") accessing the data and programs in this database. A SAP system contains at least one instance but may contain more mostly for reasons of sizing and performance. In a system with multiple instances load balancing mechanisms ensure that the load is spread evenly over the available application servers. Installations of the Web Application Server (landscapes) typically consist of three systems: one for development; one for testing and quality assurance; and one for production. The landscape may contain more systems (e.g. separate systems for unit testing and pre-production testing) or it may contain fewer (e.g. only development and production without separate QA); nevertheless three is the most common configuration. ABAP programs are created and undergo first testing in the development system. Afterwards they are distributed to the other systems in the landscape. These actions take place under control of the Change and Transport System (CTS) which is responsible for concurrency control (e.g. preventing two developers from changing the same code at the same time) version management and deployment of programs on the QA and production systems. The Web Application Server consists of three layers: the database layer; the application layer; and the presentation layer. These layers may run on the same or on different physical machines. The database layer contains the relational database and the database software. The application layer knowledge contains the instance or instances of the system. All application processes including the business transactions and the ABAP development run on the application layer. The presentation layer handles the interaction with users of the system. Online access to ABAP application servers can go via a proprietary graphical interface which is called ""SAP GUI"" or via a Web browser. Software layers[edit] ABAP software is deployed in software components. Examples for these are: SAP_BASIS is the required technical base layer which is required in every ABAP system. SAP_ABA contains functionalities which is required for all kinds of business applications like business partner and address management. SAP_UI provides the functionality to create SAP UI5 applications. BBPCRM is an example for a business application in this case the CRM application SAP ABAP is an ERP programming language.... Transactions[edit] A transaction in SAP terminology is the execution of a program. The normal way of executing ABAP code in the SAP system is by entering a transaction code (for instance VA01 is the transaction code for ""Create Sales Order""). Transactions can be called via system-defined or user-specific role-based menus. They can also be started by entering the transaction code directly into a command field which is present in every SAP screen. Transactions can also be invoked programmatically by means of the ABAP statements CALL TRANSACTION and LEAVE TO TRANSACTION. The general notion of a transaction is called a Logical Unit of Work (LUW) in SAP terminology;[citation needed] the short form of transaction code is T-code. Types of ABAP programs[edit] As in other programming languages an ABAP program is either an executable unit or a library which provides reusable code to other programs and is not independently executable. ABAP distinguishes two types of executable programs: Reports Module pools Reports follow a relatively simple programming model whereby a user optionally enters a set of parameters (e.g. a selection over a subSET of data) and the program then uses the input parameters to produce a report in the form of an interactive list. The term ""report"" can be somewhat misleading in that reports can also be designed to modify data; the reason why these programs are called reports is the ""list-oriented"" nature of the output they produce. Module pools define more complex patterns of user interaction using a collection of screens. The term “screen” refers to the actual physical image that the user sees. Each screen also has a ""flow logic"" which refers to the ABAP code implicitly invoked by the screens which is divided into a ""PBO"" (Process Before Output) and ""PAI"" (Process After Input) section. In SAP documentation the term “dynpro” (dynamic program) refers to the combination of the screen and its flow logic. The non-executable program types are: INCLUDE modules Subroutine pools Function groups Object classes Interfaces Type pools An INCLUDE module gets included at generation time into the calling unit; it is often used to subdivide large programs. Subroutine pools contain ABAP subroutines (blocks of code enclosed by FORM/ENDFORM statements and invoked with PERFORM). Function groups are libraries of self-contained function modules (enclosed by FUNCTION/ENDFUNCTION and invoked with CALL FUNCTION). Object classes and interfaces are similar to Java classes and interfaces; the first define a set of methods and attributes the second contain ""empty"" method definitions for which any class implementing the interface must provide explicit code. Type pools define collections of data types and constants. ABAP programs are composed of individual sentences (statements). The first word in a statement is called an ABAP keyword. Each statement ends with a period. Words must always be separated by at least one space. Statements can be indented as you wish. With keywords additions and operands the ABAP runtime system does not differentiate between upper and lowercase. Statements can extend beyond one line. You can have several statements in a single line (though this is not recommended). Lines that begin with asterisk * in the first column are recognized as comment lines by the ABAP runtime system and are ignored. Double quotations marks ("") indicate that the remainder of a line is a comment. Development environment[edit] There are two possible ways to develop in ABAP. The availability depends on the release of the ABAP system. ABAP Workbench[edit] The ABAP Workbench is part of the ABAP system and is accessed via SAP GUI. It contains different tools for editing programs. The most important of these are (transaction codes are shown in parentheses): ABAP Editor for writing and editing reports module pools includes and subroutine pools (SE38) ABAP Dictionary for processing database table definitions and retrieving global types (SE11) Menu Painter for designing the user interface (menu bar standard toolbar application toolbar function key assignment) (SE41) Screen Painter for designing screens and flow logic (SE51) Function Builder for function modules (SE37) Class Builder for ABAP Objects classes and interfaces (SE24) The Object Navigator (transaction SE80) provides a single integrated interface into these various tools. ABAP Development Tools[edit] The ABAP Development Tools (ADT) formally known as ""ABAP in Eclipse"" is a set of plugins for the Eclipse platform to develop ABAP.[5] In this scenario the ABAP developer installs the required tools on his computer and works locally whereas a continuous synchronization with the backend is performed. ABAP Dictionary[edit] The ABAP Dictionary contains all metadata about the data in the SAP system. It is closely linked with the ABAP Workbench in that any reference to data (e.g. a table a view or a data type) will be obtained from the dictionary. Developers use the ABAP Dictionary transactions (directly or through the SE80 Object Navigator inside the ABAP Workbench) to display and maintain this metadata. When a dictionary object is changed a program that references the changed object will automatically reference the new version the next time the program runs. Because ABAP is interpreted it is not necessary to recompile programs that reference changed dictionary objects. A brief description of the most important types of dictionary objects follows: Tables are data containers that exist in the underlying relational database. In the majority of cases there is a 1-to-1 relationship between the definition of a table in the ABAP Dictionary and the definition of that same table in the database (same name same columns). These tables are known as ""transparent"". There are two types of non-transparent tables: ""pooled"" tables exist as independent entities in the ABAP Dictionary but they are grouped together in large physical tables (""pools"") at the database level. Pooled tables are often small tables holding for example configuration data. ""Clustered"" tables are physically grouped in ""clusters"" based on their primary keys; for instance assume that a clustered table H contains ""header"" data about sales invoices whereas another clustered table D holds the invoice line items. Each row of H would then be physically grouped with the related rows from D inside a ""cluster table"" in the database. This type of clustering which is designed to improve performance also exists as native functionality in some though not all relational database systems. Indexes provide accelerated access to table data for often used selection conditions. Every SAP table has a ""primary index"" which is created implicitly along with the table and is used to enforce primary key uniqueness. Additional indexes (unique or non-unique) may be defined; these are called ""secondary indexes"". Views have the same purpose as in the underlying database: they define subsets of columns (and/or rows) from one or - using a join condition - several tables. Since views are virtual tables (they refer to data in other tables) they do not take a substantial amount of space. Structures are complex data types consisting of multiple fields (comparable to struct in C/C++). Data elements provide the semantic content for a table or structure field. For example dozens of tables and structures might contain a field giving the price (of a finished product raw material resource ...). All these fields could have the same data element ""PRICE"". Domains define the structural characteristics of a data element. For example the data element PRICE could have an assigned domain that defines the price as a numeric field with two decimals. Domains can also carry semantic content in providing a list of possible values. For example a domain ""BOOLEAN"" could define a field of type ""character"" with length 1 and case-insensitive but would also restrict the possible values to ""T"" (true) or ""F"" (false). Search helps (successors to the now obsolete ""matchcodes"") provide advanced search strategies when a user wants to see the possible values for a data field. The ABAP runtime provides implicit assistance (by listing all values for the field e.g. all existing customer numbers) but search helps can be used to refine this functionality e.g. by providing customer searches by geographical location credit rating etc. Lock objects implement application-level locking when changing data. ABAP syntax[edit] This brief description of the ABAP syntax begins with the ubiquitous ""Hello world"" program. Hello world[edit] REPORT TEST. WRITE 'Hello World'. This example contains two statements: REPORT and WRITE. The program displays a list on the screen. In this case the list consists of the single line ""Hello World"". The REPORT statement indicates that this program is a report. This program could be a module pool after replacing the REPORT statement with PROGRAM. Chained statements[edit] Consecutive statements with an identical first (leftmost) part can be combined into a ""chained"" statement using the chain operator :. The common part of the statements is written to the left of the colon the differing parts are written to the right of the colon and separated by commas. The colon operator is attached directly to the preceding token without a space (the same applies to the commas in the token list on as can be seen in the examples below). Chaining is often used in WRITE statements. WRITE accepts just one argument so if for instance you wanted to display three fields from a structure called FLIGHTINFO you would have to code: WRITE FLIGHTINFO-CITYFROM. WRITE FLIGHTINFO-CITYTO. WRITE FLIGHTINFO-AIRPTO. Chaining the statements results in a more readable and more intuitive form: WRITE: FLIGHTINFO-CITYFROM FLIGHTINFO-CITYTO FLIGHTINFO-AIRPTO. In a chain statement the first part (before the colon) is not limited to the statement name alone. The entire common part of the consecutive statements can be placed before the colon. Example: REPLACE 'A' WITH 'B' INTO LASTNAME. REPLACE 'A' WITH 'B' INTO FIRSTNAME. REPLACE 'A' WITH 'B' INTO CITYNAME. could be rewritten in chained form as: REPLACE 'A' WITH 'B' INTO: LASTNAME FIRSTNAME CITYNAME. Comments[edit] ABAP has 2 ways of defining text as a comment: An asterisk (*) in the leftmost column of a line makes the entire line a comment A double quotation mark ("") anywhere on a line makes the rest of that line a comment Example: *************************************** ** Program: BOOKINGS ** ** Author: Joe Byte 07-Jul-2007 ** *************************************** REPORT BOOKINGS. * Read flight bookings from the database SELECT * FROM FLIGHTINFO WHERE CLASS = 'Y' ""Y = economy OR CLASS = 'C'. ""C = business (...) Spaces[edit] Code in ABAP is whitespace-sensitive. x = a+b(c). assigns to variable x the substring of the variable a starting from b with the length defined by the variable c. x = a + b( c ). assigns to variable x the sum of the variable a and the result of the call to method b with the parameter c. ABAP statements[edit] In contrast with languages like C/C++ or Java which define a limited set of language-specific statements and provide most functionality via libraries ABAP contains an extensive amount of built-in statements. These statements traditionally used sentence-like structures and avoided symbols making ABAP programs relatively verbose. However in more recent versions of the ABAP language a terser style is possible.[6] An example of statement based syntax (whose syntax originates in COBOL) versus expression-based syntax (as in C/Java): ADD TAX TO PRICE. * is equivalent to PRICE = PRICE + TAX . Data types and variables[edit] ABAP provides a set of built-in data types. In addition every structure table view or data element defined in the ABAP Dictionary can be used to type a variable. Also object classes and interfaces can be used as types. The built-in data types are: Type Description I Integer P Packed decimal F Floating point N Character numeric C Character D Date T Time X Hexadecimal (raw byte) STRING Variable-length string XSTRING Variable-length raw byte array Date variables or constants (type D) contain the number of days since January 1 1 AD. Time variables or constants (type T) contain the number of seconds since midnight. A special characteristic of both types is that they can be accessed both as integers and as character strings (with internal format ""YYYYMMDD"" for dates and ""hhmmss"" for times) which can be used for date and time handling. For example the code snippet below calculates the last day of the previous month (note: SY-DATUM is a system-defined variable containing the current date): DATA LAST_EOM TYPE D. ""last end-of-month date * Start from today's date LAST_EOM = SY-DATUM. * Set characters 6 and 7 (0-relative) of the YYYYMMDD string to ""01"" * giving the first day of the current month LAST_EOM+6(2) = '01'. * Subtract one day LAST_EOM = LAST_EOM - 1. WRITE: 'Last day of previous month was' LAST_EOM. All ABAP variables have to be explicitly declared in order to be used. They can be declared either with individual statements and explicit typing or since ABAP 7.40 inline with inferred typing. Explicitly typed declaration[edit] Normally all declarations are placed at the top of the code module (program subroutine function) before the first executable statement; this placement is a convention and not an enforced syntax rule. The declaration consists of the name type length (where applicable) additional modifiers (e.g. the number of implied decimals for a packed decimal field) and optionally an initial value: * Primitive types: DATA: COUNTER TYPE I VALIDITY TYPE I VALUE 60 TAXRATE(3) TYPE P DECIMALS 1 LASTNAME(20) TYPE C DESCRIPTION TYPE STRING. * Dictionary types: DATA: ORIGIN TYPE COUNTRY. * Internal table: DATA: T_FLIGHTS TYPE TABLE OF FLIGHTINFO T_LOOKUP TYPE HASHED TABLE OF FLT_LOOKUP. * Objects: DATA: BOOKING TYPE REF TO CL_FLT_BOOKING. Notice the use of the colon to chain together consecutive DATA statements. Inline declaration[edit] Since ABAP 7.40 variables can be declared inline with the following syntax: DATA(variable_name) = 'VALUE'. For this type of declaration it must be possible to infer the type statically e.g. by method signature or database table structure. This syntax is also possible in OpenSQL statements: SELECT * FROM ekko into @DATA(lt_ekko) WHERE ebeln EQ @lv_ebeln. ABAP Objects[edit] The ABAP language supports object-oriented programming through a feature known as ""ABAP Objects"".[7] This helps to simplify applications and make them more controllable. ABAP Objects is fully compatible with the existing language so one can use existing statements and modularization units in programs that use ABAP Objects and can also use ABAP Objects in existing ABAP programs. Syntax checking is stronger in ABAP Objects programs and some syntactical forms (usually older ones) of certain statements are not permitted. Objects form a capsule which combines the character to the respective behavior. Objects should enable programmers to map a real problem and its proposed software solution on a one-to-one basis. Typical objects in a business environment are for example ‘Customer’ ‘Order’ or ‘Invoice’. From Release 3.1 onwards the Business Object Repository (BOR) of SAP Web Application Server ABAP has contained examples of such objects. The BOR object model will be integrated into ABAP Objects in the next Release by migrating the BOR object types to the ABAP class library. A comprehensive introduction to object orientation as a whole would go far beyond the limits of this introduction to ABAP Objects. This documentation introduces a selection of terms that are used universally in object orientation and also occur in ABAP Objects. In subsequent sections it goes on to discuss in more detail how these terms are used in ABAP Objects. The end of this section contains a list of further reading with a selection of titles about object orientation. Objects are instances of classes. They contain data and provide services. The data forms the attributes of the object. The services are known as methods (also known as operations or functions). Typically methods operate on private data (the attributes or state of the object) which is only visible to the methods of the object. Thus the attributes of an object cannot be changed directly by the user but only by the methods of the object. This guarantees the internal consistency of the object. Classes describe objects. From a technical point of view objects are runtime instances of a class. In theory any number of objects based on a single class may be created. Each instance (object) of a class has a unique identity and its own set of values for its attributes. Object References are unique addresses that may be used to identify and point to objects in a program. Object references allow access to the attributes and methods of an object. In object-oriented programming objects usually have the following properties: Encapsulation - Objects restrict the visibility of their resources (attributes and methods) to other users. Every object has an interface which determines how other objects can interact with it. The implementation of the object is encapsulated that is invisible outside the object itself. Inheritance - An existing class may be used to derive a new class. Derived classes inherit the data and methods of the superclass. However they can overwrite existing methods and also add new ones. Polymorphism - Identical (identically-named) methods behave differently in different classes. In ABAP Objects polymorphism is implemented by redefining methods during inheritance and by using constructs called interfaces. CDS Views[edit] The ABAP Core Data Services (ABAP CDS) are the implementation of the general CDS concept for AS ABAP. ABAP CDS makes it possible to define semantic data models on the central database of the application server. On AS ABAP these models can be defined independently of the database system. The entities of these models provide enhanced access functions when compared with existing database tables and views defined in ABAP Dictionary making it possible to optimize Open SQL-based applications. This is particularly clear when an AS ABAP uses a SAP HANA database since its in-memory characteristics can be implemented in an optimum manner. The data models are defined using the data definition language (DDL) and data control language (DCL) provided in the ABAP CDS in the ABAP CDS syntax. The objects defined using these languages are integrated into ABAP Dictionary and managed here too. CDS source code can only be programmed in the Eclipse-based ABAP Development Tools (ADT). The Data Definition Language (DDL) and the Data Control Language (DCL) use different editors.[8] Features[edit] SAP NW ABAP SQL Joins SQL Set Operations SELECT Clauses 7.40 SP05 INNER JOIN LEFT OUTER JOIN RIGHT OUTER JOIN UNION UNION ALL WHERE GROUP BY HAVING AS 7.40 SP08 7.50 7.51 CROSS JOIN SAP NW ABAP Literals Arithmetic Operators Conditional Expressions 7.40 SP05 In SELECT list e.g. literal as FieldName As RHS value + - ∗ Boolean operators NOT AND OR Comparison operators BETWEEN = <> < > <= >= LIKE IS [NOT] NULL (Only in WHERE condition) 7.40 SP08 / (Float-based division) 7.50 7.51 Function as RHS value SAP NW ABAP Aggregate functions Numeric functions String functions 7.40 SP05 AVG( [DISTINCT] ) MAX MIN SUM( [DISTINCT] ) COUNT( [DISTINCT] ) COUNT(*) CEIL MOD SUBSTRING LPAD 7.40 SP08 ABS DIV (Integer-based division) DIVISION (Decimal-based division) FLOOR ROUND CONCAT REPLACE 7.50 CONCAT_WITH_SPACE INSTR LEFT LENGTH LTRIM RIGHT RPAD RTRIM 7.51 AVG( [AS] ) to specify return type FLTP_TO_DEC UPPER LOWER SAP NW ABAP Byte string functions Date and time functions Other functions 7.40 SP05 CAST to built-in DDIC types e.g. abap.fltp 7.40 SP08 COALESCE CURRENCY_CONVERSION UNIT_CONVERSION DECIMAL_SHIFT 7.50 BINTOHEX HEXTOBIN DATS_DAYS_BETWEEN DATS_ADD_DAYS DATS_ADD_MONTHS DATS_IS_VALID TIMS_IS_VALID TSTMP_IS_VALID TSTMP_CURRENT_UTCTIMESTAMP TSTMP_SECONDS_BETWEEN TSTMP_ADD_SECONDS CAST to data elements e.g. CHAR80 can be nested 7.51 ABAP_SYSTEM_TIMEZONE ABAP_USER_TIMEZONE TSTMP_TO_DATS TSTMP_TO_TIMS TSTMP_TO_DST DATS_TIMS_TO_TSTMP CAST PRESERVING TYPE SSTRING to other types CLNT LANG TIMS UNIT to data elements of type CHAR and SSTRING CHAR SSTRING NUMC to ACCP and vice versa Aggregate function as operand SAP NW ABAP Conditional (CASE) expressions Extensibility (Unmanaged) Associations 7.40 SP05 ""Simple"" CASE (behaves like switch statement) Nested CASE statements $EXTENSION.* (support for database table extensions) Path expressions in SELECT list FROM clause WHERE clause HAVING clause Filter conditions in path expressions e.g. Products._Texts[ lagu = 'EN' ] as english_name 7.40 SP08 ""Searched"" CASE (behaves like if ... else if) EXTEND VIEW 7.50 CASE expressions can be used as operands in CAST functions EXTEND VIEW with input parameters path expressions conversions date and time functions 7.51 Function as RHS value EXTEND VIEW with aggregate functions GROUP BY clauses and UNIONs Association definitions in views with UNIONs Default filters for associations (WITH DEFAULT FILTER) Cardinality ""to many"" (*:) can be specified in path filters SAP NW ABAP Session variables Input parameters Other 7.40 SP05 KEY elements 7.40 SP08 input parameters on most DBs 7.50 $session.user (sy-uname) $session.client (sy-mandt) $session.system_language (sy-langu) Input parameters on AnyDB Table function (SAP HANA only) 7.51 $session.system_date (sy-datum) Metadata extensions [9] Internal tables in ABAP[edit] Internal tables are an important feature of the ABAP language. An internal table is defined similarly to a vector of structs in C++ or a vector of objects in Java. The main difference with these languages is that ABAP provides a collection of statements to easily access and manipulate the contents of internal tables. Note that ABAP does not support arrays; the only way to define a multi-element data object is to use an internal table.[citation needed] Internal tables are a way to store variable data sets of a fixed structure in the working memory of ABAP and provides the functionality of dynamic arrays. The data is stored on a row-by-row basis where each row has the same structure. Internal tables are preferably used to store and format the content of database tables from within a program. Furthermore internal tables in connection with structures are an important means of defining complex data structures in an ABAP program. The following example defines an internal table with two fields with the format of database table VBRK. * First define structured type TYPES: BEGIN OF t_vbrk VBELN TYPE VBRK-VBELN ZUONR TYPE VBRK-ZUONR END OF t_vbrk. * Now define internal table of our defined type t_vbrk DATA : gt_vbrk TYPE STANDARD TABLE OF t_vbrk gt_vbrk_2 TYPE STANDARD TABLE OF t_vbrk. ""easy to define more tables * If needed define structure (line of internal table) * Definition with type or with reference to internal table: DATA : gs_vbrk TYPE t_vbrk gs_vbrk2 LIKE LINE OF gt_vbrk2. * You can also define table type if needed TYPES tt_vbrk TYPE STANDARD TABLE OF t_vbrk. History[edit] The following list only gives a rough overview about some important milestones in the history of the language ABAP. For more details see ABAP - Release-Specific Changes. Version Release date Major changes 4.6C May 2000 ABAP Objects 6.40 2004 Shared Objects 7.0 2006 Switch framework/Enhancement concept 7.02 Expressions like check lcl=>mi(1) + abs( -2 ) >= 3. 7.40 2012-11-29 ""Code pushdown""—use advanced features from the underlying database Constructor expressions (NEW VALUE REF CONV CAST EXACT COND SWITCH) Partially Implemented test classes' interfaces Table Expressions Internal table line existence/line index functions 7.40 SP05 December 2013 MOVE-CORRESPONDING for internal tables LET expression in constructor expressions CORRESPONDING operator CDS Views ABAP Managed Database Procedures 7.40 SP08 September 2014 FOR expressions Constructor operator REDUCE Start value for constructor expressions GROUP BY for internal tables Filter expressions and default values for table expressions Open SQL inline declarations after INTO statement Optional interface methods 7.50 November 2015 New built-in data type INT8 Relational expression IS INSTANCE OF Open SQL host expressions Open SQL expressions ROUND CONCAT LPAD LENGTH REPLACE RIGHT RTRIM and SUBSTRING Open SQL path expressions Open SQL SELECT UNION Open SQL INSERT FROM subquery 7.51 October 2016 Enumerations Common table expressions in Open SQL Open SQL/CDS CROSS JOIN CDS client handling Metadata extensions in CDS Date and Time in Open SQL/CDS Floating point on Open SQL/CDS 7.52 September 2017 Virtual sorting of internal tables 7.54 September 2019 New Built-In Data Types New Built-In ABAP Type utclong Calculation Assignments Decimal Places in Time Stamps Client Handling Extensions of the INTO Clause Definition of Associations New Aggregate Function STRING_AGG New Built-In Functions Addition DISTINCT Optional in Aggregate Function COUNT Window Expressions SQL Conditions Revised Temporal Hierarchies New Hierarchy Navigators Aggregate Expressions in SQL Expressions CAST Matrix Revised Strict Mode in the Syntax Check Syntax Check for Literals and Host Constants Annotation for Database Hints Annotations for Releasing Elements Specifying CDS Entities After USING Quotation Marks for Logical Schemas Addition in place of the Statement late numbering Addition in class ... unique External name of an action Static Field Control Arbitrary Name for Handler Methods Behavior Pool No Exceptions Entity Manipulation Language TYPE STRUCTURE FOR Response Information Absolute Type Names Business Service Authorization Checks in Updates Implicit Message Type in IF_T100_DYN_MSG Using Test Classes Addition COMBINATION MODE OR|AND of the Statement GRANT SELECT ON Addition REDEFINITION of the Statement GRANT SELECT ON Predicate VOID Addition IN SCENARIO of the Statement GRANT SELECT ON Generic Aspect Condition of the Statement DEFINE ROLE New Variant INHERITING CONDITIONS FROM SUPER Different REPLACING Operators Definition of a Generic Aspect DCL Restrictions for ABAP CDS Hierarchies DCL Restrictions for Transactional Projection View Entities See also[edit] ERP software Secure Network Communications SAP Logon Ticket Single sign-on References[edit] ^ ABAP — Release-Specific Changes: Changes in Releases 7.5x ^ A new generation of CDS views: CDS view entities ^ """"ABAP History"". SAP-technical.com"". Archived from the original on 2017-11-15. Retrieved 2010-08-09. ^ See Product Availability Matrix ^ http://scn.sap.com/docs/DOC-29297 ^ Example of an ABAP program with many expressions ^ ""Classes"". SAP NetWeaver 7.0. [1] accessed 10 August 2009. ^ https://help.sap.com/doc/abapdocu_740_index_htm/7.40/en-US/index.htm?file=ABENCDS.htm ^ https://blogs.sap.com/2015/02/02/core-data-services-cds-abap-feature-matrix/ External links[edit] ABAP — Keyword Documentation SAP Help Portal ABAP Development discussions blogs documents and videos on the SAP Community Network (SCN) Authority control BNE: XX556741 BNF: cb15589937c (data) GND: 4610511-6 LCCN: sh98001561 SUDOC: 120299658 Retrieved from ""https://en.wikipedia.org/w/index.php?title=ABAP&oldid=998219502"" Categories: Fourth-generation programming languagesSAP SECross-platform softwareHidden categories: Articles needing additional references from July 2011All articles needing additional referencesWikipedia articles with style issues from November 2016All articles with style issuesArticles with multiple maintenance issuesAll articles with unsourced statementsArticles with unsourced statements from May 2012Articles with unsourced statements from March 2016All articles with vague or ambiguous timeVague or ambiguous time from January 2020Wikipedia articles with BNE identifiersWikipedia articles with BNF identifiersWikipedia articles with GND identifiersWikipedia articles with LCCN identifiersWikipedia articles with SUDOC identifiers",8f94abc3de459979,64c501b781c4c633,612746bead9bc718,3653ceefecb816c4
ef2385f729d7871f,ABC,https://en.wikipedia.org/wiki/ABC_(programming_language),"ABC (programming language) From Wikipedia the free encyclopedia Jump to navigation Jump to search Programming language ABCParadigmsmulti-paradigm: imperative procedural structuredDesigned byLeo Geurts Lambert Meertens Steven PembertonDeveloperCentrum Wiskunde & Informatica (CWI)First appearedJanuary 1987; 34 years ago (1987-01)Stable release1.05.02 / 1990; 31 years ago (1990) Typing disciplinestrong polymorphicOSUnix-like Windows MacOS and Atari TOSWebsitehomepages.cwi.nl/~steven/abc/Influenced bySETL ALGOL 68[1]InfluencedPython ABC is an imperative general-purpose programming language and integrated development environment (IDE) developed at Centrum Wiskunde & Informatica (CWI) Netherlands by Leo Geurts Lambert Meertens and Steven Pemberton. It is interactive structured high-level and intended to be used instead of BASIC Pascal or AWK. It is intended for teaching or prototyping but not as a systems-programming language. ABC had a major influence on the design of the language Python developed by Guido van Rossum who formerly worked for several years on the ABC system in the mid-1980s.[2][3] Contents 1 Features 2 Example 3 References 4 External links Features[edit] Its designers claim that ABC programs are typically around a quarter the size of the equivalent Pascal or C programs and more readable.[4] Key features include: Only five basic data types No required variable declarations Explicit support for top-down programming Statement nesting is indicated by indentation via the off-side rule Infinite precision arithmetic unlimited-sized lists and strings and other features supporting orthogonality and ease of use by novices ABC was originally a monolithic implementation leading to an inability to adapt to new requirements such as creating a graphical user interface (GUI). ABC could not directly access the underlying file system and operating system. The full ABC system includes a programming environment with a structure editor (syntax-directed editor) suggestions static variables (persistent) and multiple workspaces and is available as an interpreter–compiler. As of 2020[update] the latest version is 1.05.02 and it is ported to Unix DOS Atari and Apple MacOS. Example[edit] An example function to collect the set of all words in a document: HOW TO RETURN words document: PUT {} IN collection FOR line IN document: FOR word IN split line: IF word not.in collection: INSERT word IN collection RETURN collection References[edit] ^ Biancuzzi Federico; Warden Shane (April 2009). Masterminds of Programming: Conversations with the Creators of Major Programming Languages. O'Reilly Media. p. 32. ISBN 0-596-51517-0. Retrieved December 14 2009. He was clearly influenced by ALGOL 68's philosophy of providing constructs that can be combined in many different ways to produce all sorts of different data structures or ways of structuring a program. – Guido van Rossum ^ Hamilton Naomi (2008-05-08). ""The A-Z of Programming Languages: Python"". Computerworld. IDG Communications. Archived from the original on 2008-12-29. Retrieved 2020-09-04. ... I figured I could design and implement a language 'almost but not quite entirely unlike' ABC improving upon ABC's deficiencies ... ^ Stewart Bruce (2002-06-04). ""An Interview with Guido van Rossum"". ONLamp.com. O’Reilly Media. Archived from the original on 2013-03-13. Retrieved 2020-09-04. ... in my head I had analyzed some of the reasons it had failed. ^ Pemberton Steven (2012-02-22). ""The ABC Programming Language: a short introduction"". Centrum Wiskunde & Informatica (CWI). Amsterdam. Retrieved 2020-09-04. External links[edit] ABC Programmer's Handbook This article is based on material taken from the Free On-line Dictionary of Computing prior to 1 November 2008 and incorporated under the ""relicensing"" terms of the GFDL version 1.3 or later. Retrieved from ""https://en.wikipedia.org/w/index.php?title=ABC_(programming_language)&oldid=986715002"" Categories: Computer science in the NetherlandsDutch inventionsEducational programming languagesInformation technology in the NetherlandsPersistent programming languagesProcedural programming languagesProgramming languages created in the 1980sHidden categories: Articles with short descriptionShort description matches WikidataArticles containing potentially dated statements from 2020All articles containing potentially dated statements",1ebadf31f3187f4b,8af09690c9a139f6,af15c047d4bfb3ea,dbaedb394b323c27,64314d13c3ba791a,806f6500dcfc98b9,8b6e2c772d4960bd
