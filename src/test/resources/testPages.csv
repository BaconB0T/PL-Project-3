26e3cfd86d89a511,A.NET,https://en.wikipedia.org/wiki/A_Sharp_(.NET),"A Sharp (.NET) From Wikipedia the free encyclopedia Jump to navigation Jump to search Programming language port The correct title of this article is A# (.NET). The substitution of the # is due to technical restrictions. This article relies too much on references to primary sources. Please improve this by adding secondary or tertiary sources. (October 2011) (Learn how and when to remove this template message) A#Designed byDr. Martin C. Carlisle Lt Col Ricky Sward Maj Jeff HumphriesDeveloperAdaCoreFirst appeared2004; 17 years ago (2004)PlatformCommon Language InfrastructureOSCross-platformLicenseGNU General Public LicenseWebsitewww.asharp.martincarlisle.com A# is a port of the Ada programming language to the Microsoft .NET platform. A# is freely distributed by the Department of Computer Science at the United States Air Force Academy as a service to the Ada community under the terms of the GNU General Public License. AdaCore has taken over this development and announced ""GNAT for .NET"" which is a fully supported .NET product with all of the features of A# and more.[1] References[edit] ^ Cited by Martin Carlisle (USAFA) http://asharp.martincarlisle.com/ and see also http://www.adacore.com/2007/09/10/adacore-first-to-bring-true-net-integration-to-ada/ Archived 2007-10-28 at the Wayback Machine External links[edit] A# for .NET Ada Sharp .NET Programming environment vteCommon Language InfrastructureArchitecture Application domain Code Access Security Common Intermediate Language (CIL) CIL instructions Common Type System (CTS) Platform Invocation Services (P/Invoke) Virtual Execution System (VES) Components Assembly Delegate Global Assembly Cache (GAC) Manifest Metadata StandardLibrariesKernel Profile Base Class Library (BCL) Runtime Infrastructure Library Compact Profile Network Library Reflection Library XML Library Extended Array Library Extended Numerics Library Parallel Library Vararg Library ImplementationsMicrosoft .NET .NET Framework .NET Compact Framework .NET Micro Framework Other Mono Portable.NET LanguagesMajor languages C# Visual Basic .NET F# PowerShell Other Axum A# Boo Cobra C++/CLI IronScheme IronPython IronRuby JScript .NET J# Nemerle Oxygene Phalanger Q# Scala Microsoft Small Basic Comparison C# and Java C# and Visual Basic .NET Java and .NET platforms Visual Basic and Visual Basic .NET Organizations .NET Foundation DotGNU Microsoft Xamarin This programming-language-related article is a stub. You can help Wikipedia by expanding it.vte Retrieved from ""https://en.wikipedia.org/w/index.php?title=A_Sharp_(.NET)&oldid=932297712"" Categories: Ada (programming language).NET programming languagesProgramming language topic stubsHidden categories: Webarchive template wayback linksArticles with short descriptionShort description matches WikidataRestricted titlesArticles lacking reliable references from October 2011All articles lacking reliable referencesAll stub articles",
9316632bd3f17e5f,A-0 System,https://en.wikipedia.org/wiki/A-0_System,"A-0 System From Wikipedia the free encyclopedia Jump to navigation Jump to search Programming language The A-0 system (Arithmetic Language version 0) written by Grace Murray Hopper [1] in 1951 and 1952 for the UNIVAC I was an early[2] compiler related tool developed for electronic computers.[3] The A-0 functioned more as a loader or linker than the modern notion of a compiler. A program was specified as a sequence of subroutines and arguments. The subroutines were identified by a numeric code and the arguments to the subroutines were written directly after each subroutine code. The A-0 system converted the specification into machine code that could be fed into the computer a second time to execute the said program. The A-0 system was followed by the A-1 A-2 [4] A-3 (released as ARITH-MATIC) AT-3 (released as MATH-MATIC) and B-0 (released as FLOW-MATIC). The A-2 system was developed at the UNIVAC division of Remington Rand in 1953 and released to customers by the end of that year.[5] Customers were provided the source code for A-2 and invited to send their improvements back to UNIVAC. Thus A-2 could be considered an example of the result of an early philosophy similar to free and open-source software.[6] Contents 1 See also 2 Notes 3 External links 4 References See also[edit] History of compiler construction Notes[edit] ^ Ridgway Richard (1952). ""Compiling routines"". Proceeding ACM '52 Proceedings of the 1952 ACM National Meeting (Toronto). ^ ""List of early compilers and assemblers"". ^ Hopper ""Keynote Address"" Sammet pg. 12 ^ *""PAPERS: Automatic Programming: The A 2 Compiler System -- Part I"" (PDF). Computers and Automation. 4 (9): 25–29. Sep 1955. Retrieved 2020-09-05. ""PAPERS: Automatic Programming: The A 2 Compiler System -- Part II"" (PDF). Computers and Automation. 4 (10): 15–27. Oct 1955. Retrieved 2020-09-05. ^ Ceruzzi Paul (1998). A History of Modern Computing. The MIT Press. ^ ""Heresy & Heretical Open Source: A Heretic's Perspective"". External links[edit] Proceedings of the 1954 MIT Summer Session on ""Digital Computers - Advanced Coding Techniques section 7 - A2 Compiler and Associated Routines for use with Univac References[edit] Hopper Grace (May 1952). ""The Education of a Computer"" (PDF). Proceedings of the Association for Computing Machinery Conference (Pittsburgh) May 1952. pp. 243–249. doi:10.1145/609784.609818. Hopper Grace (16 February 1955). ""Automatic Coding for Digital Computers"" (PDF). High Speed Computer Conference (Louisiana State University) February 1955. Remington Rand. Hopper Grace. ""Keynote Address"". Proceedings of the ACM SIGPLAN History of Programming Languages (HOPL) conference. Ridgway Richard K. (1952). ""Compiling Routines"". Proceedings of the 1952 ACM national meeting (Toronto) ACM '52. Sammet Jean (1969). Programming Languages: History and Fundamentals. Prentice-Hall. pp. g. 12. Retrieved from ""https://en.wikipedia.org/w/index.php?title=A-0_System&oldid=996447120"" Categories: Procedural programming languagesProgramming languages created in 1951Hidden categories: Articles with short descriptionShort description is different from Wikidata",
dbdfed4f2a476b3d,A+,https://en.wikipedia.org/wiki/A%2B_(programming_language),"A+ (programming language) From Wikipedia the free encyclopedia Jump to navigation Jump to search A+ParadigmArrayDesigned byArthur WhitneyDeveloperMorgan StanleyFirst appeared1988; 33 years ago (1988)Stable release4.22-1 / March 27 2008; 12 years ago (2008-03-27) Typing disciplineDynamic strongLicenseGNU General Public LicenseFilename extensions.. .+ .a .m[1]Websitewww.aplusdev.orgMajor implementationsA+Influenced byAPLInfluencedK A+ is an array programming language descended from the programming language A which in turn was created to replace APL in 1988.[2] Arthur Whitney developed the A portion of A+ while other developers at Morgan Stanley extended it adding a graphical user interface and other language features. A+ is a high-level interactive interpreted language designed for numerically intensive applications especially those found in financial applications. A+ runs on many Unix variants including Linux. It is free and open source software released under a GNU General Public License. A+ provides an extended set of functions and operators a graphical user interface with automatic synchronizing of widgets and variables asynchronous executing of functions associated with variables and events dynamic loading of user compiled subroutines and other features. A newer graphical user interface has not yet been ported to all supported platforms The A+ language implements the following changes to the APL language: an A+ function may have up to nine formal parameters A+ code statements are separated by semicolons so a single statement may be divided into two or more physical lines The explicit result of a function or operator is the result of the last statement executed A+ implements an object called a dependency which is a global variable (the dependent variable) and an associated definition that is like a function with no arguments. Values can be explicitly set and referenced in exactly the same ways as for a global variable but they can also be set through the associated definition. Interactive A+ development is primarily done in the Xemacs editor through extensions to the editor. Because A+ code uses the original APL symbols displaying A+ requires a font with those special characters; a font named kapl is provided on the web site for that purpose. Arthur Whitney went on to create a proprietary array language named K. Like J K omits the APL character set. It lacks some of the perceived complexities of A+ such as the existence of statements and two different modes of syntax. References[edit] ^ ""A+ Reference: Appendix: Quick Reference"". Retrieved 2020-02-06. ^ ""A+: History of A+"". www.aplusdev.org. Retrieved 2019-01-18. External links[edit] Official website A+ Development.org vteAPL programming languageFeatures APL syntax and symbols Direct function (dfn) EBCDIC code page Iverson bracket Rank Shared Variables ImplementationsMajor Dyalog APL IBM APL2 APL2000 SHARP APL APLX NARS2000 Dialects A+ APLNext ELI GNU APL J K Q; kdb+ LYaPAS Polymorphic Programming Language (PPL) CommunityProfessionalassociations Association for Computing Machinery: SIGAPL British APL Association OrganizationsBusiness Analogic Corporation CompuServe Digital Equipment Corporation (DEC) DNA Systems Dyalog Ltd. IBM I. P. Sharp Associates Kx Systems Micro Computer Machines (MCM) Science Research Associates Scientific Time Sharing Corporation (STSC) Soliton Incorporated Telecompute Integrated Systems Inc. Time Sharing Resources (TSR) Education Carnegie Mellon University (CMU) University of Maryland People Phil Abrams Bob Bernecky Larry Breed Charles Brenner Fred Brooks Jim Brown Adin Falkoff Patrick E. Hagerty Herbert Hellerman Roger Hui Kenneth E. Iverson Dick Lathwell Eugene McDonnell Robert Metzger Roger Moore Alan Perlis John Scholes J. Henri Schueler Bob Smith Edward H. Sussenguth Jr. Arthur Whitney William Yerazunis Rodnay Zaks Other Iverson Award Category Commons Retrieved from ""https://en.wikipedia.org/w/index.php?title=A%2B_(programming_language)&oldid=998200389"" Categories: APL programming language familyArray programming languagesData-centric programming languagesHidden categories: Official website different in Wikidata and Wikipedia",
d9b660ed4dddb0a9,ABAP,https://en.wikipedia.org/wiki/ABAP,"ABAP From Wikipedia the free encyclopedia Jump to navigation Jump to search For other uses see ABAP (disambiguation). This article has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages) This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources: ""ABAP"" – news · newspapers · books · scholar · JSTOR (July 2011) (Learn how and when to remove this template message) This article is written like a manual or guidebook. Please help rewrite this article from a descriptive neutral point of view and remove advice or instruction. (November 2016) (Learn how and when to remove this template message) (Learn how and when to remove this template message) ABAP/4ParadigmObject-oriented structured imperativeDesigned bySAP SEFirst appeared1983; 38 years ago (1983)Stable release7.55[1] / September 2 2020; 4 months ago (2020-09-02)[2] Typing disciplineStatic strong safe nominativeOSCross-platformWebsitescn.sap.com/community/abapMajor implementationsSAP R/2 SAP R/3 SAP S/4HANAInfluenced byObjective-C [citation needed] COBOL [citation needed] SQL[citation needed] ABAP (Advanced Business Application Programming originally Allgemeiner Berichts-Aufbereitungs-Prozessor German for ""general report creation processor""[3]) is a high-level programming language created by the German software company SAP SE. It is extracted from the base computing languages Java C C++ and Python. It is currently positioned alongside Java as the language for programming the SAP NetWeaver Application Server which is part of the SAP NetWeaver platform for building business applications. Contents 1 Introduction 2 ABAP runtime environment 2.1 SAP systems and landscapes 2.2 Software layers 3 Transactions 4 Types of ABAP programs 5 Development environment 5.1 ABAP Workbench 5.2 ABAP Development Tools 6 ABAP Dictionary 7 ABAP syntax 7.1 Hello world 7.2 Chained statements 7.3 Comments 7.4 Spaces 7.5 ABAP statements 8 Data types and variables 8.1 Explicitly typed declaration 8.2 Inline declaration 9 ABAP Objects 10 CDS Views 10.1 Features 11 Internal tables in ABAP 12 History 13 See also 14 References 15 External links Introduction[edit] ABAP is one of the many application-specific fourth-generation languages (4GLs) first developed in the 1980s. It was originally the report language for SAP R/2 a platform that enabled large corporations to build mainframe business applications for materials management and financial and management accounting. ABAP establish integration between independent software. ABAP used to be an abbreviation of Allgemeiner Berichts-Aufbereitungs-Prozessor German for ""generic report preparation processor"" but was later[when?] renamed to the English Advanced Business Application Programming. ABAP was one of the first languages to include the concept of Logical Databases (LDBs) which provides a high level of abstraction from the basic database level(s) which supports every platform language and units. The ABAP language was originally used by developers to develop the SAP R/3 platform. It was also intended to be used by SAP customers to enhance SAP applications – customers can develop custom reports and interfaces with ABAP programming. The language was geared towards more technical customers with programming experience. ABAP remains as the language for creating programs for the client–server R/3 system which SAP first released in 1992. As computer hardware evolved through the 1990s more and more of SAP's applications and systems were written in ABAP. By 2001 all but the most basic functions were written in ABAP. In 1999 SAP released an object-oriented extension to ABAP called ABAP Objects along with R/3 release 4.6. SAP's current development platform NetWeaver supports both ABAP and Java. ABAP has an abstraction between the business applications the operating system and database. This ensures that applications do not depend directly upon a specific server or database platform and can easily be ported from one platform to another. SAP Netweaver currently runs on UNIX (AIX HP-UX Solaris Linux) Microsoft Windows i5/OS on IBM System i (formerly iSeries AS/400) and z/OS on IBM System z (formerly zSeries S/390). Supported databases are HANA SAP ASE (formerly Sybase) IBM DB2 Informix MaxDB Oracle and Microsoft SQL Server (support for Informix was discontinued in SAP Basis release 7.00).[4] ABAP runtime environment[edit] All ABAP programs reside inside the SAP database. They are not stored in separate external files like Java or C++ programs. In the database all ABAP code exists in two forms: source code which can be viewed and edited with the ABAP Workbench tools; and generated code a binary representation somewhat comparable with Java bytecode. ABAP programs execute under the control of the runtime system which is part of the SAP kernel. The runtime system is responsible for processing ABAP statements controlling the flow logic of screens and responding to events (such as a user clicking on a screen button); in this respect it can be seen as a Virtual Machine comparable with the Java VM. A key component of the ABAP runtime system is the Database Interface which turns database-independent ABAP statements (""Open SQL"") into statements understood by the underlying DBMS (""Native SQL""). The database interface handles all the communication with the relational database on behalf of ABAP programs; It also contains extra features such as buffering of tables and frequently accessed data in the local memory of the application server. SAP systems and landscapes[edit] All SAP data exists and all SAP software runs in the context of a SAP system. A system consists of a central relational database and one or more application (""instances"") accessing the data and programs in this database. A SAP system contains at least one instance but may contain more mostly for reasons of sizing and performance. In a system with multiple instances load balancing mechanisms ensure that the load is spread evenly over the available application servers. Installations of the Web Application Server (landscapes) typically consist of three systems: one for development; one for testing and quality assurance; and one for production. The landscape may contain more systems (e.g. separate systems for unit testing and pre-production testing) or it may contain fewer (e.g. only development and production without separate QA); nevertheless three is the most common configuration. ABAP programs are created and undergo first testing in the development system. Afterwards they are distributed to the other systems in the landscape. These actions take place under control of the Change and Transport System (CTS) which is responsible for concurrency control (e.g. preventing two developers from changing the same code at the same time) version management and deployment of programs on the QA and production systems. The Web Application Server consists of three layers: the database layer; the application layer; and the presentation layer. These layers may run on the same or on different physical machines. The database layer contains the relational database and the database software. The application layer knowledge contains the instance or instances of the system. All application processes including the business transactions and the ABAP development run on the application layer. The presentation layer handles the interaction with users of the system. Online access to ABAP application servers can go via a proprietary graphical interface which is called ""SAP GUI"" or via a Web browser. Software layers[edit] ABAP software is deployed in software components. Examples for these are: SAP_BASIS is the required technical base layer which is required in every ABAP system. SAP_ABA contains functionalities which is required for all kinds of business applications like business partner and address management. SAP_UI provides the functionality to create SAP UI5 applications. BBPCRM is an example for a business application in this case the CRM application SAP ABAP is an ERP programming language.... Transactions[edit] A transaction in SAP terminology is the execution of a program. The normal way of executing ABAP code in the SAP system is by entering a transaction code (for instance VA01 is the transaction code for ""Create Sales Order""). Transactions can be called via system-defined or user-specific role-based menus. They can also be started by entering the transaction code directly into a command field which is present in every SAP screen. Transactions can also be invoked programmatically by means of the ABAP statements CALL TRANSACTION and LEAVE TO TRANSACTION. The general notion of a transaction is called a Logical Unit of Work (LUW) in SAP terminology;[citation needed] the short form of transaction code is T-code. Types of ABAP programs[edit] As in other programming languages an ABAP program is either an executable unit or a library which provides reusable code to other programs and is not independently executable. ABAP distinguishes two types of executable programs: Reports Module pools Reports follow a relatively simple programming model whereby a user optionally enters a set of parameters (e.g. a selection over a subSET of data) and the program then uses the input parameters to produce a report in the form of an interactive list. The term ""report"" can be somewhat misleading in that reports can also be designed to modify data; the reason why these programs are called reports is the ""list-oriented"" nature of the output they produce. Module pools define more complex patterns of user interaction using a collection of screens. The term “screen” refers to the actual physical image that the user sees. Each screen also has a ""flow logic"" which refers to the ABAP code implicitly invoked by the screens which is divided into a ""PBO"" (Process Before Output) and ""PAI"" (Process After Input) section. In SAP documentation the term “dynpro” (dynamic program) refers to the combination of the screen and its flow logic. The non-executable program types are: INCLUDE modules Subroutine pools Function groups Object classes Interfaces Type pools An INCLUDE module gets included at generation time into the calling unit; it is often used to subdivide large programs. Subroutine pools contain ABAP subroutines (blocks of code enclosed by FORM/ENDFORM statements and invoked with PERFORM). Function groups are libraries of self-contained function modules (enclosed by FUNCTION/ENDFUNCTION and invoked with CALL FUNCTION). Object classes and interfaces are similar to Java classes and interfaces; the first define a set of methods and attributes the second contain ""empty"" method definitions for which any class implementing the interface must provide explicit code. Type pools define collections of data types and constants. ABAP programs are composed of individual sentences (statements). The first word in a statement is called an ABAP keyword. Each statement ends with a period. Words must always be separated by at least one space. Statements can be indented as you wish. With keywords additions and operands the ABAP runtime system does not differentiate between upper and lowercase. Statements can extend beyond one line. You can have several statements in a single line (though this is not recommended). Lines that begin with asterisk * in the first column are recognized as comment lines by the ABAP runtime system and are ignored. Double quotations marks ("") indicate that the remainder of a line is a comment. Development environment[edit] There are two possible ways to develop in ABAP. The availability depends on the release of the ABAP system. ABAP Workbench[edit] The ABAP Workbench is part of the ABAP system and is accessed via SAP GUI. It contains different tools for editing programs. The most important of these are (transaction codes are shown in parentheses): ABAP Editor for writing and editing reports module pools includes and subroutine pools (SE38) ABAP Dictionary for processing database table definitions and retrieving global types (SE11) Menu Painter for designing the user interface (menu bar standard toolbar application toolbar function key assignment) (SE41) Screen Painter for designing screens and flow logic (SE51) Function Builder for function modules (SE37) Class Builder for ABAP Objects classes and interfaces (SE24) The Object Navigator (transaction SE80) provides a single integrated interface into these various tools. ABAP Development Tools[edit] The ABAP Development Tools (ADT) formally known as ""ABAP in Eclipse"" is a set of plugins for the Eclipse platform to develop ABAP.[5] In this scenario the ABAP developer installs the required tools on his computer and works locally whereas a continuous synchronization with the backend is performed. ABAP Dictionary[edit] The ABAP Dictionary contains all metadata about the data in the SAP system. It is closely linked with the ABAP Workbench in that any reference to data (e.g. a table a view or a data type) will be obtained from the dictionary. Developers use the ABAP Dictionary transactions (directly or through the SE80 Object Navigator inside the ABAP Workbench) to display and maintain this metadata. When a dictionary object is changed a program that references the changed object will automatically reference the new version the next time the program runs. Because ABAP is interpreted it is not necessary to recompile programs that reference changed dictionary objects. A brief description of the most important types of dictionary objects follows: Tables are data containers that exist in the underlying relational database. In the majority of cases there is a 1-to-1 relationship between the definition of a table in the ABAP Dictionary and the definition of that same table in the database (same name same columns). These tables are known as ""transparent"". There are two types of non-transparent tables: ""pooled"" tables exist as independent entities in the ABAP Dictionary but they are grouped together in large physical tables (""pools"") at the database level. Pooled tables are often small tables holding for example configuration data. ""Clustered"" tables are physically grouped in ""clusters"" based on their primary keys; for instance assume that a clustered table H contains ""header"" data about sales invoices whereas another clustered table D holds the invoice line items. Each row of H would then be physically grouped with the related rows from D inside a ""cluster table"" in the database. This type of clustering which is designed to improve performance also exists as native functionality in some though not all relational database systems. Indexes provide accelerated access to table data for often used selection conditions. Every SAP table has a ""primary index"" which is created implicitly along with the table and is used to enforce primary key uniqueness. Additional indexes (unique or non-unique) may be defined; these are called ""secondary indexes"". Views have the same purpose as in the underlying database: they define subsets of columns (and/or rows) from one or - using a join condition - several tables. Since views are virtual tables (they refer to data in other tables) they do not take a substantial amount of space. Structures are complex data types consisting of multiple fields (comparable to struct in C/C++). Data elements provide the semantic content for a table or structure field. For example dozens of tables and structures might contain a field giving the price (of a finished product raw material resource ...). All these fields could have the same data element ""PRICE"". Domains define the structural characteristics of a data element. For example the data element PRICE could have an assigned domain that defines the price as a numeric field with two decimals. Domains can also carry semantic content in providing a list of possible values. For example a domain ""BOOLEAN"" could define a field of type ""character"" with length 1 and case-insensitive but would also restrict the possible values to ""T"" (true) or ""F"" (false). Search helps (successors to the now obsolete ""matchcodes"") provide advanced search strategies when a user wants to see the possible values for a data field. The ABAP runtime provides implicit assistance (by listing all values for the field e.g. all existing customer numbers) but search helps can be used to refine this functionality e.g. by providing customer searches by geographical location credit rating etc. Lock objects implement application-level locking when changing data. ABAP syntax[edit] This brief description of the ABAP syntax begins with the ubiquitous ""Hello world"" program. Hello world[edit] REPORT TEST. WRITE 'Hello World'. This example contains two statements: REPORT and WRITE. The program displays a list on the screen. In this case the list consists of the single line ""Hello World"". The REPORT statement indicates that this program is a report. This program could be a module pool after replacing the REPORT statement with PROGRAM. Chained statements[edit] Consecutive statements with an identical first (leftmost) part can be combined into a ""chained"" statement using the chain operator :. The common part of the statements is written to the left of the colon the differing parts are written to the right of the colon and separated by commas. The colon operator is attached directly to the preceding token without a space (the same applies to the commas in the token list on as can be seen in the examples below). Chaining is often used in WRITE statements. WRITE accepts just one argument so if for instance you wanted to display three fields from a structure called FLIGHTINFO you would have to code: WRITE FLIGHTINFO-CITYFROM. WRITE FLIGHTINFO-CITYTO. WRITE FLIGHTINFO-AIRPTO. Chaining the statements results in a more readable and more intuitive form: WRITE: FLIGHTINFO-CITYFROM FLIGHTINFO-CITYTO FLIGHTINFO-AIRPTO. In a chain statement the first part (before the colon) is not limited to the statement name alone. The entire common part of the consecutive statements can be placed before the colon. Example: REPLACE 'A' WITH 'B' INTO LASTNAME. REPLACE 'A' WITH 'B' INTO FIRSTNAME. REPLACE 'A' WITH 'B' INTO CITYNAME. could be rewritten in chained form as: REPLACE 'A' WITH 'B' INTO: LASTNAME FIRSTNAME CITYNAME. Comments[edit] ABAP has 2 ways of defining text as a comment: An asterisk (*) in the leftmost column of a line makes the entire line a comment A double quotation mark ("") anywhere on a line makes the rest of that line a comment Example: *************************************** ** Program: BOOKINGS ** ** Author: Joe Byte 07-Jul-2007 ** *************************************** REPORT BOOKINGS. * Read flight bookings from the database SELECT * FROM FLIGHTINFO WHERE CLASS = 'Y' ""Y = economy OR CLASS = 'C'. ""C = business (...) Spaces[edit] Code in ABAP is whitespace-sensitive. x = a+b(c). assigns to variable x the substring of the variable a starting from b with the length defined by the variable c. x = a + b( c ). assigns to variable x the sum of the variable a and the result of the call to method b with the parameter c. ABAP statements[edit] In contrast with languages like C/C++ or Java which define a limited set of language-specific statements and provide most functionality via libraries ABAP contains an extensive amount of built-in statements. These statements traditionally used sentence-like structures and avoided symbols making ABAP programs relatively verbose. However in more recent versions of the ABAP language a terser style is possible.[6] An example of statement based syntax (whose syntax originates in COBOL) versus expression-based syntax (as in C/Java): ADD TAX TO PRICE. * is equivalent to PRICE = PRICE + TAX . Data types and variables[edit] ABAP provides a set of built-in data types. In addition every structure table view or data element defined in the ABAP Dictionary can be used to type a variable. Also object classes and interfaces can be used as types. The built-in data types are: Type Description I Integer P Packed decimal F Floating point N Character numeric C Character D Date T Time X Hexadecimal (raw byte) STRING Variable-length string XSTRING Variable-length raw byte array Date variables or constants (type D) contain the number of days since January 1 1 AD. Time variables or constants (type T) contain the number of seconds since midnight. A special characteristic of both types is that they can be accessed both as integers and as character strings (with internal format ""YYYYMMDD"" for dates and ""hhmmss"" for times) which can be used for date and time handling. For example the code snippet below calculates the last day of the previous month (note: SY-DATUM is a system-defined variable containing the current date): DATA LAST_EOM TYPE D. ""last end-of-month date * Start from today's date LAST_EOM = SY-DATUM. * Set characters 6 and 7 (0-relative) of the YYYYMMDD string to ""01"" * giving the first day of the current month LAST_EOM+6(2) = '01'. * Subtract one day LAST_EOM = LAST_EOM - 1. WRITE: 'Last day of previous month was' LAST_EOM. All ABAP variables have to be explicitly declared in order to be used. They can be declared either with individual statements and explicit typing or since ABAP 7.40 inline with inferred typing. Explicitly typed declaration[edit] Normally all declarations are placed at the top of the code module (program subroutine function) before the first executable statement; this placement is a convention and not an enforced syntax rule. The declaration consists of the name type length (where applicable) additional modifiers (e.g. the number of implied decimals for a packed decimal field) and optionally an initial value: * Primitive types: DATA: COUNTER TYPE I VALIDITY TYPE I VALUE 60 TAXRATE(3) TYPE P DECIMALS 1 LASTNAME(20) TYPE C DESCRIPTION TYPE STRING. * Dictionary types: DATA: ORIGIN TYPE COUNTRY. * Internal table: DATA: T_FLIGHTS TYPE TABLE OF FLIGHTINFO T_LOOKUP TYPE HASHED TABLE OF FLT_LOOKUP. * Objects: DATA: BOOKING TYPE REF TO CL_FLT_BOOKING. Notice the use of the colon to chain together consecutive DATA statements. Inline declaration[edit] Since ABAP 7.40 variables can be declared inline with the following syntax: DATA(variable_name) = 'VALUE'. For this type of declaration it must be possible to infer the type statically e.g. by method signature or database table structure. This syntax is also possible in OpenSQL statements: SELECT * FROM ekko into @DATA(lt_ekko) WHERE ebeln EQ @lv_ebeln. ABAP Objects[edit] The ABAP language supports object-oriented programming through a feature known as ""ABAP Objects"".[7] This helps to simplify applications and make them more controllable. ABAP Objects is fully compatible with the existing language so one can use existing statements and modularization units in programs that use ABAP Objects and can also use ABAP Objects in existing ABAP programs. Syntax checking is stronger in ABAP Objects programs and some syntactical forms (usually older ones) of certain statements are not permitted. Objects form a capsule which combines the character to the respective behavior. Objects should enable programmers to map a real problem and its proposed software solution on a one-to-one basis. Typical objects in a business environment are for example ‘Customer’ ‘Order’ or ‘Invoice’. From Release 3.1 onwards the Business Object Repository (BOR) of SAP Web Application Server ABAP has contained examples of such objects. The BOR object model will be integrated into ABAP Objects in the next Release by migrating the BOR object types to the ABAP class library. A comprehensive introduction to object orientation as a whole would go far beyond the limits of this introduction to ABAP Objects. This documentation introduces a selection of terms that are used universally in object orientation and also occur in ABAP Objects. In subsequent sections it goes on to discuss in more detail how these terms are used in ABAP Objects. The end of this section contains a list of further reading with a selection of titles about object orientation. Objects are instances of classes. They contain data and provide services. The data forms the attributes of the object. The services are known as methods (also known as operations or functions). Typically methods operate on private data (the attributes or state of the object) which is only visible to the methods of the object. Thus the attributes of an object cannot be changed directly by the user but only by the methods of the object. This guarantees the internal consistency of the object. Classes describe objects. From a technical point of view objects are runtime instances of a class. In theory any number of objects based on a single class may be created. Each instance (object) of a class has a unique identity and its own set of values for its attributes. Object References are unique addresses that may be used to identify and point to objects in a program. Object references allow access to the attributes and methods of an object. In object-oriented programming objects usually have the following properties: Encapsulation - Objects restrict the visibility of their resources (attributes and methods) to other users. Every object has an interface which determines how other objects can interact with it. The implementation of the object is encapsulated that is invisible outside the object itself. Inheritance - An existing class may be used to derive a new class. Derived classes inherit the data and methods of the superclass. However they can overwrite existing methods and also add new ones. Polymorphism - Identical (identically-named) methods behave differently in different classes. In ABAP Objects polymorphism is implemented by redefining methods during inheritance and by using constructs called interfaces. CDS Views[edit] The ABAP Core Data Services (ABAP CDS) are the implementation of the general CDS concept for AS ABAP. ABAP CDS makes it possible to define semantic data models on the central database of the application server. On AS ABAP these models can be defined independently of the database system. The entities of these models provide enhanced access functions when compared with existing database tables and views defined in ABAP Dictionary making it possible to optimize Open SQL-based applications. This is particularly clear when an AS ABAP uses a SAP HANA database since its in-memory characteristics can be implemented in an optimum manner. The data models are defined using the data definition language (DDL) and data control language (DCL) provided in the ABAP CDS in the ABAP CDS syntax. The objects defined using these languages are integrated into ABAP Dictionary and managed here too. CDS source code can only be programmed in the Eclipse-based ABAP Development Tools (ADT). The Data Definition Language (DDL) and the Data Control Language (DCL) use different editors.[8] Features[edit] SAP NW ABAP SQL Joins SQL Set Operations SELECT Clauses 7.40 SP05 INNER JOIN LEFT OUTER JOIN RIGHT OUTER JOIN UNION UNION ALL WHERE GROUP BY HAVING AS 7.40 SP08 7.50 7.51 CROSS JOIN SAP NW ABAP Literals Arithmetic Operators Conditional Expressions 7.40 SP05 In SELECT list e.g. literal as FieldName As RHS value + - ∗ Boolean operators NOT AND OR Comparison operators BETWEEN = <> < > <= >= LIKE IS [NOT] NULL (Only in WHERE condition) 7.40 SP08 / (Float-based division) 7.50 7.51 Function as RHS value SAP NW ABAP Aggregate functions Numeric functions String functions 7.40 SP05 AVG( [DISTINCT] ) MAX MIN SUM( [DISTINCT] ) COUNT( [DISTINCT] ) COUNT(*) CEIL MOD SUBSTRING LPAD 7.40 SP08 ABS DIV (Integer-based division) DIVISION (Decimal-based division) FLOOR ROUND CONCAT REPLACE 7.50 CONCAT_WITH_SPACE INSTR LEFT LENGTH LTRIM RIGHT RPAD RTRIM 7.51 AVG( [AS] ) to specify return type FLTP_TO_DEC UPPER LOWER SAP NW ABAP Byte string functions Date and time functions Other functions 7.40 SP05 CAST to built-in DDIC types e.g. abap.fltp 7.40 SP08 COALESCE CURRENCY_CONVERSION UNIT_CONVERSION DECIMAL_SHIFT 7.50 BINTOHEX HEXTOBIN DATS_DAYS_BETWEEN DATS_ADD_DAYS DATS_ADD_MONTHS DATS_IS_VALID TIMS_IS_VALID TSTMP_IS_VALID TSTMP_CURRENT_UTCTIMESTAMP TSTMP_SECONDS_BETWEEN TSTMP_ADD_SECONDS CAST to data elements e.g. CHAR80 can be nested 7.51 ABAP_SYSTEM_TIMEZONE ABAP_USER_TIMEZONE TSTMP_TO_DATS TSTMP_TO_TIMS TSTMP_TO_DST DATS_TIMS_TO_TSTMP CAST PRESERVING TYPE SSTRING to other types CLNT LANG TIMS UNIT to data elements of type CHAR and SSTRING CHAR SSTRING NUMC to ACCP and vice versa Aggregate function as operand SAP NW ABAP Conditional (CASE) expressions Extensibility (Unmanaged) Associations 7.40 SP05 ""Simple"" CASE (behaves like switch statement) Nested CASE statements $EXTENSION.* (support for database table extensions) Path expressions in SELECT list FROM clause WHERE clause HAVING clause Filter conditions in path expressions e.g. Products._Texts[ lagu = 'EN' ] as english_name 7.40 SP08 ""Searched"" CASE (behaves like if ... else if) EXTEND VIEW 7.50 CASE expressions can be used as operands in CAST functions EXTEND VIEW with input parameters path expressions conversions date and time functions 7.51 Function as RHS value EXTEND VIEW with aggregate functions GROUP BY clauses and UNIONs Association definitions in views with UNIONs Default filters for associations (WITH DEFAULT FILTER) Cardinality ""to many"" (*:) can be specified in path filters SAP NW ABAP Session variables Input parameters Other 7.40 SP05 KEY elements 7.40 SP08 input parameters on most DBs 7.50 $session.user (sy-uname) $session.client (sy-mandt) $session.system_language (sy-langu) Input parameters on AnyDB Table function (SAP HANA only) 7.51 $session.system_date (sy-datum) Metadata extensions [9] Internal tables in ABAP[edit] Internal tables are an important feature of the ABAP language. An internal table is defined similarly to a vector of structs in C++ or a vector of objects in Java. The main difference with these languages is that ABAP provides a collection of statements to easily access and manipulate the contents of internal tables. Note that ABAP does not support arrays; the only way to define a multi-element data object is to use an internal table.[citation needed] Internal tables are a way to store variable data sets of a fixed structure in the working memory of ABAP and provides the functionality of dynamic arrays. The data is stored on a row-by-row basis where each row has the same structure. Internal tables are preferably used to store and format the content of database tables from within a program. Furthermore internal tables in connection with structures are an important means of defining complex data structures in an ABAP program. The following example defines an internal table with two fields with the format of database table VBRK. * First define structured type TYPES: BEGIN OF t_vbrk VBELN TYPE VBRK-VBELN ZUONR TYPE VBRK-ZUONR END OF t_vbrk. * Now define internal table of our defined type t_vbrk DATA : gt_vbrk TYPE STANDARD TABLE OF t_vbrk gt_vbrk_2 TYPE STANDARD TABLE OF t_vbrk. ""easy to define more tables * If needed define structure (line of internal table) * Definition with type or with reference to internal table: DATA : gs_vbrk TYPE t_vbrk gs_vbrk2 LIKE LINE OF gt_vbrk2. * You can also define table type if needed TYPES tt_vbrk TYPE STANDARD TABLE OF t_vbrk. History[edit] The following list only gives a rough overview about some important milestones in the history of the language ABAP. For more details see ABAP - Release-Specific Changes. Version Release date Major changes 4.6C May 2000 ABAP Objects 6.40 2004 Shared Objects 7.0 2006 Switch framework/Enhancement concept 7.02 Expressions like check lcl=>mi(1) + abs( -2 ) >= 3. 7.40 2012-11-29 ""Code pushdown""—use advanced features from the underlying database Constructor expressions (NEW VALUE REF CONV CAST EXACT COND SWITCH) Partially Implemented test classes' interfaces Table Expressions Internal table line existence/line index functions 7.40 SP05 December 2013 MOVE-CORRESPONDING for internal tables LET expression in constructor expressions CORRESPONDING operator CDS Views ABAP Managed Database Procedures 7.40 SP08 September 2014 FOR expressions Constructor operator REDUCE Start value for constructor expressions GROUP BY for internal tables Filter expressions and default values for table expressions Open SQL inline declarations after INTO statement Optional interface methods 7.50 November 2015 New built-in data type INT8 Relational expression IS INSTANCE OF Open SQL host expressions Open SQL expressions ROUND CONCAT LPAD LENGTH REPLACE RIGHT RTRIM and SUBSTRING Open SQL path expressions Open SQL SELECT UNION Open SQL INSERT FROM subquery 7.51 October 2016 Enumerations Common table expressions in Open SQL Open SQL/CDS CROSS JOIN CDS client handling Metadata extensions in CDS Date and Time in Open SQL/CDS Floating point on Open SQL/CDS 7.52 September 2017 Virtual sorting of internal tables 7.54 September 2019 New Built-In Data Types New Built-In ABAP Type utclong Calculation Assignments Decimal Places in Time Stamps Client Handling Extensions of the INTO Clause Definition of Associations New Aggregate Function STRING_AGG New Built-In Functions Addition DISTINCT Optional in Aggregate Function COUNT Window Expressions SQL Conditions Revised Temporal Hierarchies New Hierarchy Navigators Aggregate Expressions in SQL Expressions CAST Matrix Revised Strict Mode in the Syntax Check Syntax Check for Literals and Host Constants Annotation for Database Hints Annotations for Releasing Elements Specifying CDS Entities After USING Quotation Marks for Logical Schemas Addition in place of the Statement late numbering Addition in class ... unique External name of an action Static Field Control Arbitrary Name for Handler Methods Behavior Pool No Exceptions Entity Manipulation Language TYPE STRUCTURE FOR Response Information Absolute Type Names Business Service Authorization Checks in Updates Implicit Message Type in IF_T100_DYN_MSG Using Test Classes Addition COMBINATION MODE OR|AND of the Statement GRANT SELECT ON Addition REDEFINITION of the Statement GRANT SELECT ON Predicate VOID Addition IN SCENARIO of the Statement GRANT SELECT ON Generic Aspect Condition of the Statement DEFINE ROLE New Variant INHERITING CONDITIONS FROM SUPER Different REPLACING Operators Definition of a Generic Aspect DCL Restrictions for ABAP CDS Hierarchies DCL Restrictions for Transactional Projection View Entities See also[edit] ERP software Secure Network Communications SAP Logon Ticket Single sign-on References[edit] ^ ABAP — Release-Specific Changes: Changes in Releases 7.5x ^ A new generation of CDS views: CDS view entities ^ """"ABAP History"". SAP-technical.com"". Archived from the original on 2017-11-15. Retrieved 2010-08-09. ^ See Product Availability Matrix ^ http://scn.sap.com/docs/DOC-29297 ^ Example of an ABAP program with many expressions ^ ""Classes"". SAP NetWeaver 7.0. [1] accessed 10 August 2009. ^ https://help.sap.com/doc/abapdocu_740_index_htm/7.40/en-US/index.htm?file=ABENCDS.htm ^ https://blogs.sap.com/2015/02/02/core-data-services-cds-abap-feature-matrix/ External links[edit] ABAP — Keyword Documentation SAP Help Portal ABAP Development discussions blogs documents and videos on the SAP Community Network (SCN) Authority control BNE: XX556741 BNF: cb15589937c (data) GND: 4610511-6 LCCN: sh98001561 SUDOC: 120299658 Retrieved from ""https://en.wikipedia.org/w/index.php?title=ABAP&oldid=998219502"" Categories: Fourth-generation programming languagesSAP SECross-platform softwareHidden categories: Articles needing additional references from July 2011All articles needing additional referencesWikipedia articles with style issues from November 2016All articles with style issuesArticles with multiple maintenance issuesAll articles with unsourced statementsArticles with unsourced statements from May 2012Articles with unsourced statements from March 2016All articles with vague or ambiguous timeVague or ambiguous time from January 2020Wikipedia articles with BNE identifiersWikipedia articles with BNF identifiersWikipedia articles with GND identifiersWikipedia articles with LCCN identifiersWikipedia articles with SUDOC identifiers",3653ceefecb816c4
ef2385f729d7871f,ABC,https://en.wikipedia.org/wiki/ABC_(programming_language),"ABC (programming language) From Wikipedia the free encyclopedia Jump to navigation Jump to search Programming language ABCParadigmsmulti-paradigm: imperative procedural structuredDesigned byLeo Geurts Lambert Meertens Steven PembertonDeveloperCentrum Wiskunde & Informatica (CWI)First appearedJanuary 1987; 34 years ago (1987-01)Stable release1.05.02 / 1990; 31 years ago (1990) Typing disciplinestrong polymorphicOSUnix-like Windows MacOS and Atari TOSWebsitehomepages.cwi.nl/~steven/abc/Influenced bySETL ALGOL 68[1]InfluencedPython ABC is an imperative general-purpose programming language and integrated development environment (IDE) developed at Centrum Wiskunde & Informatica (CWI) Netherlands by Leo Geurts Lambert Meertens and Steven Pemberton. It is interactive structured high-level and intended to be used instead of BASIC Pascal or AWK. It is intended for teaching or prototyping but not as a systems-programming language. ABC had a major influence on the design of the language Python developed by Guido van Rossum who formerly worked for several years on the ABC system in the mid-1980s.[2][3] Contents 1 Features 2 Example 3 References 4 External links Features[edit] Its designers claim that ABC programs are typically around a quarter the size of the equivalent Pascal or C programs and more readable.[4] Key features include: Only five basic data types No required variable declarations Explicit support for top-down programming Statement nesting is indicated by indentation via the off-side rule Infinite precision arithmetic unlimited-sized lists and strings and other features supporting orthogonality and ease of use by novices ABC was originally a monolithic implementation leading to an inability to adapt to new requirements such as creating a graphical user interface (GUI). ABC could not directly access the underlying file system and operating system. The full ABC system includes a programming environment with a structure editor (syntax-directed editor) suggestions static variables (persistent) and multiple workspaces and is available as an interpreter–compiler. As of 2020[update] the latest version is 1.05.02 and it is ported to Unix DOS Atari and Apple MacOS. Example[edit] An example function to collect the set of all words in a document: HOW TO RETURN words document: PUT {} IN collection FOR line IN document: FOR word IN split line: IF word not.in collection: INSERT word IN collection RETURN collection References[edit] ^ Biancuzzi Federico; Warden Shane (April 2009). Masterminds of Programming: Conversations with the Creators of Major Programming Languages. O'Reilly Media. p. 32. ISBN 0-596-51517-0. Retrieved December 14 2009. He was clearly influenced by ALGOL 68's philosophy of providing constructs that can be combined in many different ways to produce all sorts of different data structures or ways of structuring a program. – Guido van Rossum ^ Hamilton Naomi (2008-05-08). ""The A-Z of Programming Languages: Python"". Computerworld. IDG Communications. Archived from the original on 2008-12-29. Retrieved 2020-09-04. ... I figured I could design and implement a language 'almost but not quite entirely unlike' ABC improving upon ABC's deficiencies ... ^ Stewart Bruce (2002-06-04). ""An Interview with Guido van Rossum"". ONLamp.com. O’Reilly Media. Archived from the original on 2013-03-13. Retrieved 2020-09-04. ... in my head I had analyzed some of the reasons it had failed. ^ Pemberton Steven (2012-02-22). ""The ABC Programming Language: a short introduction"". Centrum Wiskunde & Informatica (CWI). Amsterdam. Retrieved 2020-09-04. External links[edit] ABC Programmer's Handbook This article is based on material taken from the Free On-line Dictionary of Computing prior to 1 November 2008 and incorporated under the ""relicensing"" terms of the GFDL version 1.3 or later. Retrieved from ""https://en.wikipedia.org/w/index.php?title=ABC_(programming_language)&oldid=986715002"" Categories: Computer science in the NetherlandsDutch inventionsEducational programming languagesInformation technology in the NetherlandsPersistent programming languagesProcedural programming languagesProgramming languages created in the 1980sHidden categories: Articles with short descriptionShort description matches WikidataArticles containing potentially dated statements from 2020All articles containing potentially dated statements",
b4637e99e79eae92,FOIL,https://en.wikipedia.org/wiki/FOIL_(programming_language),"FOIL (programming language) From Wikipedia the free encyclopedia Jump to navigation Jump to search This article is about programming languages. For other types of foil see Foil (disambiguation). This article has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages) This article may lack focus or may be about more than one topic. Please help improve this article possibly by splitting the article and/or by introducing a disambiguation page or discuss this issue on the talk page. (March 2018) This article does not cite any sources. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources: ""FOIL"" programming language – news · newspapers · books · scholar · JSTOR (December 2009) (Learn how and when to remove this template message) (Learn how and when to remove this template message) FOIL was the name for two different programming languages. Contents 1 CAI style language 1.1 Example 2 Music generation language 3 External links CAI style language[edit] The first FOIL was a CAI language developed at the University of Michigan in 1967. The acronym stood for File-Oriented Interpretive Language and it was very similar to other CAI languages like COURSEWRITER and PILOT. However it tried to make the language somewhat block-structured using whitespace which ended up making the language vaguely similar to BASIC or ABC. Example[edit] :START COUNT=0 TY Enter the number of times you want to repeat the statement: ACCEPT MAX=NUMBER.(1) :LOOP TY This loop has run #COUNT times it will terminate when it runs #MAX times IF COUNT<MAX COUNT=COUNT+1 GO TO :LOOP TY Do you want to do this again? ACCEPT IF 'yes' GO TO START IF 'no' GO TO FINISH :FINISH TY Goodbye! STOP Music generation language[edit] The second FOIL was a music generation language for the Touché computer instrument in 1979. The Touché was a keyboard that had digital tone generation and allowed you to program software for performances. The acronym stood for Far Out Instrument Language and was succeeded by MetaFOIL and FOIL-83. The language was developed by David Rosenboom and was based on Forth. External links[edit] Information on David Rosenboom's music software FOIL - a file oriented interpretive language article at the ACM digital library This programming-language-related article is a stub. You can help Wikipedia by expanding it.vte Retrieved from ""https://en.wikipedia.org/w/index.php?title=FOIL_(programming_language)&oldid=914128286"" Categories: Educational programming languagesProgramming language topic stubsHidden categories: Wikipedia articles lacking focus from March 2018All Wikipedia articles lacking focusArticles lacking sources from December 2009All articles lacking sourcesArticles with multiple maintenance issuesAll stub articles",ef2385f729d7871f
3653ceefecb816c4,SQL,https://en.wikipedia.org/wiki/SQL,"SQL From Wikipedia the free encyclopedia Jump to navigation Jump to search This article is about the database language. For the IATA code see San Carlos Airport (California). ""SEQUEL"" redirects here. For the topic of the word see sequel. For other uses see sequel (disambiguation). Language for management and use of relational databases SQL (Structured Query Language)ParadigmDeclarativeFamilyQuery languageDesigned byDonald D. ChamberlinRaymond F. BoyceDeveloperISO/IECFirst appeared1974; 47 years ago (1974)Stable releaseSQL:2016 / December 2016; 4 years ago (2016-12) Typing disciplineStatic strongOSCross-platformWebsitewww.iso.org/standard/63555.htmlMajor implementationsManyDialects SQL-86 SQL-89 SQL-92 SQL:1999 SQL:2003 SQL:2006 SQL:2008 SQL:2011 SQL:2016 Influenced byDatalogInfluencedCQL LINQ SPARQL SOQL PowerShell [1] JPQL jOOQ N1QL Structured Query Language at Wikibooks SQL (file format)Filename extension .sqlInternet media type application/sql[2][3]Developed byISO/IECInitial release1986 (1986)Type of formatDatabaseStandardISO/IEC 9075Open format?YesWebsitewww.iso.org/standard/63555.html SQL (/ˌɛsˌkjuːˈɛl/ (listen) S-Q-L [4] /ˈsiːkwəl/ ""sequel""; Structured Query Language)[5] is a domain-specific language used in programming and designed for managing data held in a relational database management system (RDBMS) or for stream processing in a relational data stream management system (RDSMS). It is particularly useful in handling structured data i.e. data incorporating relations among entities and variables. SQL offers two main advantages over older read–write APIs such as ISAM or VSAM. Firstly it introduced the concept of accessing many records with one single command. Secondly it eliminates the need to specify how to reach a record e.g. with or without an index. Originally based upon relational algebra and tuple relational calculus SQL consists of many types of statements [6] which may be informally classed as sublanguages commonly: a data query language (DQL) [a] a data definition language (DDL) [b] a data control language (DCL) and a data manipulation language (DML).[c][7] The scope of SQL includes data query data manipulation (insert update and delete) data definition (schema creation and modification) and data access control. Although SQL is essentially a declarative language (4GL) it also includes procedural elements. SQL was one of the first commercial languages to utilize Edgar F. Codd’s relational model. The model was described in his influential 1970 paper ""A Relational Model of Data for Large Shared Data Banks"".[8] Despite not entirely adhering to the relational model as described by Codd it became the most widely used database language.[9][10] SQL became a standard of the American National Standards Institute (ANSI) in 1986 and of the International Organization for Standardization (ISO) in 1987.[11] Since then the standard has been revised to include a larger set of features. Despite the existence of standards most SQL code requires at least some changes before being ported to different database systems. Contents 1 History 2 Syntax 3 Procedural extensions 4 Interoperability and standardization 4.1 Overview 4.2 Reasons for incompatibility 4.3 Standardization history 4.4 Current standard 4.4.1 Anatomy of SQL Standard 4.4.2 Extensions to the ISO/IEC Standard 4.4.3 Technical Reports 5 Alternatives 6 Distributed SQL processing 7 Criticisms 7.1 Design 7.2 Other criticisms 7.2.1 Orthogonality and completeness 7.2.2 Null 7.2.3 Duplicates 7.2.4 Impedance mismatch 8 Data Integrity Categories 8.1 Entity integrity 8.2 Domain integrity 8.3 Referential integrity 8.4 User-defined integrity 9 SQL data types 9.1 Predefined data types 9.2 Constructed types 10 See also 11 Notes 12 References 13 Sources 13.1 SQL standards documents 13.1.1 ITTF publicly available standards and technical reports 13.1.2 Draft documents 14 External links History[edit] SQL was initially developed at IBM by Donald D. Chamberlin and Raymond F. Boyce after learning about the relational model from Edgar F. Codd[12] in the early 1970s.[13] This version initially called SEQUEL (Structured English Query Language) was designed to manipulate and retrieve data stored in IBM's original quasi-relational database management system System R which a group at IBM San Jose Research Laboratory had developed during the 1970s.[13] Chamberlin and Boyce's first attempt at a relational database language was Square but it was difficult to use due to subscript notation. After moving to the San Jose Research Laboratory in 1973 they began work on SEQUEL.[12] The acronym SEQUEL was later changed to SQL because ""SEQUEL"" was a trademark of the UK-based Hawker Siddeley Dynamics Engineering Limited company.[14] After testing SQL at customer test sites to determine the usefulness and practicality of the system IBM began developing commercial products based on their System R prototype including System/38 SQL/DS and DB2 which were commercially available in 1979 1981 and 1983 respectively.[15] In the late 1970s Relational Software Inc. (now Oracle Corporation) saw the potential of the concepts described by Codd Chamberlin and Boyce and developed their own SQL-based RDBMS with aspirations of selling it to the U.S. Navy Central Intelligence Agency and other U.S. government agencies. In June 1979 Relational Software Inc. introduced the first commercially available implementation of SQL Oracle V2 (Version2) for VAX computers. By 1986 ANSI and ISO standard groups officially adopted the standard ""Database Language SQL"" language definition. New versions of the standard were published in 1989 1992 1996 1999 2003 2006 2008 2011[12] and most recently 2016.[16] Syntax[edit] Main article: SQL syntax U P D A T E c l a u s e { U P D A T E c o u n t r y S E T c l a u s e { S E T p o p u l a t i o n = p o p u l a t i o n + 1 ⏞ e x p r e s s i o n W H E R E c l a u s e { W H E R E n a m e = ′ U S A ′ ⏞ e x p r e s s i o n ⏟ p r e d i c a t e ; } statement {\displaystyle \left.{\begin{array}{rl}\textstyle {\mathtt {UPDATE~clause}}&\{{\mathtt {UPDATE\ country}}\\\textstyle {\mathtt {SET~clause}}&\{{\mathtt {SET\ population=~}}\overbrace {\mathtt {population+1}} ^{\mathtt {expression}}\\\textstyle {\mathtt {WHERE~clause}}&\{{\mathtt {WHERE\ \underbrace {{name=}\overbrace {'USA'} ^{expression}} _{predicate};}}\end{array}}\right\}{\textstyle {\texttt {statement}}}} A chart showing several of the SQL language elements that compose a single statement The SQL language is subdivided into several language elements including: Clauses which are constituent components of statements and queries. (In some cases these are optional.)[17] Expressions which can produce either scalar values or tables consisting of columns and rows of data Predicates which specify conditions that can be evaluated to SQL three-valued logic (3VL) (true/false/unknown) or Boolean truth values and are used to limit the effects of statements and queries or to change program flow. Queries which retrieve the data based on specific criteria. This is an important element of SQL. Statements which may have a persistent effect on schemata and data or may control transactions program flow connections sessions or diagnostics. SQL statements also include the semicolon ("";"") statement terminator. Though not required on every platform it is defined as a standard part of the SQL grammar. Insignificant whitespace is generally ignored in SQL statements and queries making it easier to format SQL code for readability. Procedural extensions[edit] SQL is designed for a specific purpose: to query data contained in a relational database. SQL is a set-based declarative programming language not an imperative programming language like C or BASIC. However extensions to Standard SQL add procedural programming language functionality such as control-of-flow constructs. These include: Source Abbreviation Full name ANSI/ISO Standard SQL/PSM SQL/Persistent Stored Modules Interbase / Firebird PSQL Procedural SQL IBM DB2 SQL PL SQL Procedural Language (implements SQL/PSM) IBM Informix SPL Stored Procedural Language IBM Netezza NZPLSQL[18] (based on Postgres PL/pgSQL) Invantive PSQL[19] Invantive Procedural SQL (implements SQL/PSM and PL/SQL) MariaDB SQL/PSM PL/SQL SQL/Persistent Stored Module (implements SQL/PSM) Procedural Language/SQL (based on Ada)[20] Microsoft / Sybase T-SQL Transact-SQL Mimer SQL SQL/PSM SQL/Persistent Stored Module (implements SQL/PSM) MySQL SQL/PSM SQL/Persistent Stored Module (implements SQL/PSM) MonetDB SQL/PSM SQL/Persistent Stored Module (implements SQL/PSM) NuoDB SSP Starkey Stored Procedures Oracle PL/SQL Procedural Language/SQL (based on Ada) PostgreSQL PL/pgSQL Procedural Language/PostgreSQL Structured Query Language (based on reduced PL/SQL) SAP R/3 ABAP Advanced Business Application Programming SAP HANA SQLScript SQLScript Sybase Watcom-SQL SQL Anywhere Watcom-SQL Dialect Teradata SPL Stored Procedural Language In addition to the standard SQL/PSM extensions and proprietary SQL extensions procedural and object-oriented programmability is available on many SQL platforms via DBMS integration with other languages. The SQL standard defines SQL/JRT extensions (SQL Routines and Types for the Java Programming Language) to support Java code in SQL databases. Microsoft SQL Server 2005 uses the SQLCLR (SQL Server Common Language Runtime) to host managed .NET assemblies in the database while prior versions of SQL Server were restricted to unmanaged extended stored procedures primarily written in C. PostgreSQL lets users write functions in a wide variety of languages—including Perl Python Tcl JavaScript (PL/V8) and C.[21] Interoperability and standardization[edit] Overview[edit] SQL implementations are incompatible between vendors and do not necessarily completely follow standards. In particular date and time syntax string concatenation NULLs and comparison case sensitivity vary from vendor to vendor. Particular exceptions are PostgreSQL[22] and Mimer SQL[23] which strive for standards compliance though PostgreSQL does not adhere to the standard in how folding of unquoted names is done. The folding of unquoted names to lower case in PostgreSQL is incompatible with the SQL standard [24] which says that unquoted names should be folded to upper case.[25] Thus Foo should be equivalent to FOO not foo according to the standard. Popular implementations of SQL commonly omit support for basic features of Standard SQL such as the DATE or TIME data types. The most obvious such examples and incidentally the most popular commercial and proprietary SQL DBMSs are Oracle (whose DATE behaves as DATETIME [26][27] and lacks a TIME type)[28] and MS SQL Server (before the 2008 version). As a result SQL code can rarely be ported between database systems without modifications. Reasons for incompatibility[edit] There are several reasons for this lack of portability between database systems: The complexity and size of the SQL standard means that most implementors do not support the entire standard. The standard does not specify database behavior in several important areas (e.g. indexes file storage...) leaving implementations to decide how to behave. The SQL standard precisely specifies the syntax that a conforming database system must implement. However the standard's specification of the semantics of language constructs is less well-defined leading to ambiguity. Many database vendors have large existing customer bases; where the newer version of the SQL standard conflicts with the prior behavior of the vendor's database the vendor may be unwilling to break backward compatibility. There is little commercial incentive for vendors to make it easier for users to change database suppliers (see vendor lock-in). Users evaluating database software tend to place other factors such as performance higher in their priorities than standards conformance. Standardization history[edit] SQL was adopted as a standard by the American National Standards Institute (ANSI) in 1986 as SQL-86[29] and the International Organization for Standardization (ISO) in 1987.[11] It is maintained by ISO/IEC JTC 1 Information technology Subcommittee SC 32 Data management and interchange. Until 1996 the National Institute of Standards and Technology (NIST) data management standards program certified SQL DBMS compliance with the SQL standard. Vendors now self-certify the compliance of their products.[30] The original standard declared that the official pronunciation for ""SQL"" was an initialism: /ˌɛsˌkjuːˈɛl/ (""ess cue el"").[9] Regardless many English-speaking database professionals (including Donald Chamberlin himself[31]) use the acronym-like pronunciation of /ˈsiːkwəl/ (""sequel"") [32] mirroring the language's pre-release development name ""SEQUEL"".[13][14][31] The SQL standard has gone through a number of revisions: Year Name Alias Comments 1986 SQL-86 SQL-87 First formalized by ANSI. 1989 SQL-89 FIPS 127-1 Minor revision that added integrity constraints adopted as FIPS 127-1. 1992 SQL-92 SQL2 FIPS 127-2 Major revision (ISO 9075) Entry Level SQL-92 adopted as FIPS 127-2. 1999 SQL:1999 SQL3 Added regular expression matching recursive queries (e.g. transitive closure) triggers support for procedural and control-of-flow statements non-scalar types (arrays) and some object-oriented features (e.g. structured types). Support for embedding SQL in Java (SQL/OLB) and vice versa (SQL/JRT). 2003 SQL:2003 Introduced XML-related features (SQL/XML) window functions standardized sequences and columns with auto-generated values (including identity-columns). 2006 SQL:2006 ISO/IEC 9075-14:2006 defines ways that SQL can be used with XML. It defines ways of importing and storing XML data in an SQL database manipulating it within the database and publishing both XML and conventional SQL-data in XML form. In addition it lets applications integrate queries into their SQL code with XQuery the XML Query Language published by the World Wide Web Consortium (W3C) to concurrently access ordinary SQL-data and XML documents.[33] 2008 SQL:2008 Legalizes ORDER BY outside cursor definitions. Adds INSTEAD OF triggers TRUNCATE statement [34] FETCH clause. 2011 SQL:2011 Adds temporal data (PERIOD FOR)[35] (more information at: Temporal database#History). Enhancements for window functions and FETCH clause.[36] 2016 SQL:2016 Adds row pattern matching polymorphic table functions JSON. 2019 SQL:2019 Adds Part 15 multidimensional arrays (MDarray type and operators). Current standard[edit] The standard is commonly denoted by the pattern: ISO/IEC 9075-n:yyyy Part n: title or as a shortcut ISO/IEC 9075. ISO/IEC 9075 is complemented by ISO/IEC 13249: SQL Multimedia and Application Packages (SQL/MM) which defines SQL based interfaces and packages to widely spread applications like video audio and spatial data. Interested parties may purchase SQL standards documents from ISO [37] IEC or ANSI. A draft of SQL:2008 is freely available as a zip archive.[38] Anatomy of SQL Standard[edit] The SQL standard is divided into ten parts. There are gaps in the numbering due to the withdrawal of outdated parts. ISO/IEC 9075-1:2016 Part 1: Framework (SQL/Framework). It provides logical concepts.[39] ISO/IEC 9075-2:2016 Part 2: Foundation (SQL/Foundation). It contains the most central elements of the language and consists of both mandatory and optional features. ISO/IEC 9075-3:2016 Part 3: Call-Level Interface (SQL/CLI). It defines interfacing components (structures procedures variable bindings) that can be used to execute SQL statements from applications written in Ada C respectively C++ COBOL Fortran MUMPS Pascal or PL/I. (For Java see part 10.) SQL/CLI is defined in such a way that SQL statements and SQL/CLI procedure calls are treated as separate from the calling application's source code. Open Database Connectivity is a well-known superset of SQL/CLI. This part of the standard consists solely of mandatory features. ISO/IEC 9075-4:2016 Part 4: Persistent stored modules (SQL/PSM). It standardizes procedural extensions for SQL including flow of control condition handling statement condition signals and resignals cursors and local variables and assignment of expressions to variables and parameters. In addition SQL/PSM formalizes declaration and maintenance of persistent database language routines (e.g. ""stored procedures""). This part of the standard consists solely of optional features. ISO/IEC 9075-9:2016 Part 9: Management of External Data (SQL/MED). It provides extensions to SQL that define foreign-data wrappers and datalink types to allow SQL to manage external data. External data is data that is accessible to but not managed by an SQL-based DBMS. This part of the standard consists solely of optional features. ISO/IEC 9075-10:2016 Part 10: Object language bindings (SQL/OLB). It defines the syntax and semantics of SQLJ which is SQL embedded in Java (see also part 3). The standard also describes mechanisms to ensure binary portability of SQLJ applications and specifies various Java packages and their contained classes. This part of the standard consists solely of optional features. Unlike SQL/OLB JDBC defines an API and is not part of the SQL standard.[citation needed] ISO/IEC 9075-11:2016 Part 11: Information and definition schemas (SQL/Schemata). It defines the Information Schema and Definition Schema providing a common set of tools to make SQL databases and objects self-describing. These tools include the SQL object identifier structure and integrity constraints security and authorization specifications features and packages of ISO/IEC 9075 support of features provided by SQL-based DBMS implementations SQL-based DBMS implementation information and sizing items and the values supported by the DBMS implementations.[40] This part of the standard contains both mandatory and optional features. ISO/IEC 9075-13:2016 Part 13: SQL Routines and types using the Java TM programming language (SQL/JRT). It specifies the ability to invoke static Java methods as routines from within SQL applications ('Java-in-the-database'). It also calls for the ability to use Java classes as SQL structured user-defined types. This part of the standard consists solely of optional features. ISO/IEC 9075-14:2016 Part 14: XML-Related Specifications (SQL/XML). It specifies SQL-based extensions for using XML in conjunction with SQL. The XML data type is introduced as well as several routines functions and XML-to-SQL data type mappings to support manipulation and storage of XML in an SQL database.[33] This part of the standard consists solely of optional features.[citation needed] ISO/IEC 9075-15:2019 Part 15: Multi-dimensional arrays (SQL/MDA). It specifies a multidimensional array type (MDarray) for SQL along with operations on MDarrays MDarray slices MDarray cells and related features. This part of the standard consists solely of optional features. Extensions to the ISO/IEC Standard[edit] ISO/IEC 9075 is complemented by ISO/IEC 13249 SQL Multimedia and Application Packages. This closely related but separate standard is developed by the same committee. It defines interfaces and packages based on SQL. The aim is a unified access to typical database applications like text pictures data mining or spatial data. ISO/IEC 13249-1:2016 Part 1: Framework ISO/IEC 13249-2:2003 Part 2: Full-Text ISO/IEC 13249-3:2016 Part 3: Spatial ISO/IEC 13249-5:2003 Part 5: Still image ISO/IEC 13249-6:2006 Part 6: Data mining ISO/IEC 13249-7:2013 Part 7: History ISO/IEC 13249-8:xxxx Part 8: Metadata Registry Access MRA (work in progress) Technical Reports[edit] ISO/IEC 9075 is also accompanied by a series of Technical Reports published as ISO/IEC TR 19075. These Technical Reports explain the justification for and usage of some features of SQL giving examples where appropriate. The Technical Reports are non-normative; if there is any discrepancy from 9075 the text in 9075 holds. Currently available 19075 Technical Reports are: ISO/IEC TR 19075-1:2011 Part 1: XQuery Regular Expression Support in SQL ISO/IEC TR 19075-2:2015 Part 2: SQL Support for Time-Related Information ISO/IEC TR 19075-3:2015 Part 3: SQL Embedded in Programs using the Java programming language ISO/IEC TR 19075-4:2015 Part 4: SQL with Routines and types using the Java programming language ISO/IEC TR 19075-5:2016 Part 5: Row Pattern Recognition in SQL ISO/IEC TR 19075-6:2017 Part 6: SQL support for JavaScript Object Notation (JSON) ISO/IEC TR 19075-7:2017 Part 7: Polymorphic table functions in SQL ISO/IEC TR 19075-8:2019 Part 8: Multi-Dimensional Arrays (SQL/MDA) ISO/IEC TR 19075-9:2020 Part 9: Online analytic processing (OLAP) capabilities Alternatives[edit] A distinction should be made between alternatives to SQL as a language and alternatives to the relational model itself. Below are proposed relational alternatives to the SQL language. See navigational database and NoSQL for alternatives to the relational model. .QL: object-oriented Datalog 4D Query Language (4D QL) Datalog: critics suggest that Datalog has two advantages over SQL: it has cleaner semantics which facilitates program understanding and maintenance and it is more expressive in particular for recursive queries.[41] HTSQL: URL based query method IBM Business System 12 (IBM BS12): one of the first fully relational database management systems introduced in 1982 ISBL jOOQ: SQL implemented in Java as an internal domain-specific language Java Persistence Query Language (JPQL): The query language used by the Java Persistence API and Hibernate persistence library JavaScript: MongoDB implements its query language in a JavaScript API. LINQ: Runs SQL statements written like language constructs to query collections directly from inside .Net code. Object Query Language QBE (Query By Example) created by Moshè Zloof IBM 1977 Quel introduced in 1974 by the U.C. Berkeley Ingres project. Tutorial D XQuery Distributed SQL processing[edit] Distributed Relational Database Architecture (DRDA) was designed by a work group within IBM in the period 1988 to 1994. DRDA enables network connected relational databases to cooperate to fulfill SQL requests.[42][43] An interactive user or program can issue SQL statements to a local RDB and receive tables of data and status indicators in reply from remote RDBs. SQL statements can also be compiled and stored in remote RDBs as packages and then invoked by package name. This is important for the efficient operation of application programs that issue complex high-frequency queries. It is especially important when the tables to be accessed are located in remote systems. The messages protocols and structural components of DRDA are defined by the Distributed Data Management Architecture. Criticisms[edit] Design[edit] SQL deviates in several ways from its theoretical foundation the relational model and its tuple calculus. In that model a table is a set of tuples while in SQL tables and query results are lists of rows: the same row may occur multiple times and the order of rows can be employed in queries (e.g. in the LIMIT clause). Critics argue that SQL should be replaced with a language that returns strictly to the original foundation: for example see The Third Manifesto. However no known proof exists that such uniqueness cannot be added to SQL itself [44] or at least a variation of SQL. In other words it's quite possible that SQL can be ""fixed"" or at least improved in this regard such that the industry may not have to switch to a completely different query language to obtain uniqueness. Debate on this remains open. Other criticisms[edit] Chamberlin discusses four historical criticisms of SQL in a 2012 paper:[12] Orthogonality and completeness[edit] Early specifications did not support major features such as primary keys. Result sets could not be named and sub-queries had not been defined. These were added in 1992.[12] Null[edit] The concept of Null is the subject of some debates. The Null marker indicates that there is no value even no 0 for an integer column or a string of length 0 for a text column. The concept of Nulls enforces the 3-valued-logic in SQL which is a concrete implementation of the general 3-valued logic. Duplicates[edit] Another popular criticism is that it allows duplicate rows making integration with languages such as Python whose data types might make it difficult to accurately represent the data [12] difficult in terms of parsing and by the absence of modularity.[45] This can be avoided declaring a unique constraint with one or more fields that identifies uniquely a row in the table. That constraint could also become the primary key of the table. Impedance mismatch[edit] In a similar sense to Object-relational impedance mismatch there is a mismatch between the declarative SQL language and the procedural languages that SQL is typically embedded in. Data Integrity Categories[edit] Main data integrity categories of each RDBMS. Entity integrity[edit] Establishes that within the table the primary key has a unique value for each row checking the uniqueness of the value of the primary key avoiding that there are duplicated rows in a table. Domain integrity[edit] Restricts the type format and value range that applies to valid entries for a column within a table Referential integrity[edit] Makes rows in a table that are being used by other records impossible to delete User-defined integrity[edit] Other specific rules not included above apply SQL data types[edit] The SQL standard defines three kinds of data types: predefined data types constructed types user-defined types. Predefined data types[edit] Character Types Character (CHAR) Character Varying (VARCHAR) Character Large Object (CLOB) Binary Types Binary (BINARY) Binary Varying (VARBINARY) Binary Large Object (BLOB) Numeric Types Exact Numeric Types (NUMERIC DECIMAL SMALLINT INTEGER BIGINT) Approximate Numeric Types (FLOAT REAL DOUBLE PRECISION) Datetime Types (DATE TIME TIMESTAMP) Interval Type (INTERVAL) Boolean XML JSON Constructed types[edit] Constructed types are one of ARRAY MULTISET REF(erence) or ROW. User-defined types are comparable to classes in object-oriented language with their own constructors observers mutators methods inheritance overloading overwriting interfaces and so on. See also[edit] Relational database Object database Object-relational database List of relational database management systems Comparison of relational database management systems Comparison of object-relational database management systems D (data language specification) D4 (programming language) Query by Example SQL syntax Oracle PL/SQL Microsoft Transact-SQL (T-SQL) Online transaction processing (OLTP) Online analytical processing (OLAP) Data warehouse Relational data stream management system NoSQL MUMPS Hierarchical model Star schema Snowflake schema Notes[edit] ^ Formally ""SQL-data"" statements excluding ""SQL-data change"" statements; this is primarily the Select statement. ^ Formally ""SQL-schema"" statements. ^ Formally ""SQL-data change"" statements References[edit] ^ Paul Ryan. ""A guided tour of the Microsoft Command Shell"". Ars Technica. Retrieved 10 April 2011. ^ ""Media Type registration for application/sql"". Internet Assigned Numbers Authority. 10 April 2013. Retrieved 10 April 2013. ^ ""The application/sql Media Type RFC 6922"". Internet Engineering Task Force. April 2013. p. 3. Retrieved 10 April 2013. ^ Beaulieu Alan (April 2009). Mary E Treseler (ed.). Learning SQL (2nd ed.). Sebastopol CA USA: O'Reilly. ISBN 978-0-596-52083-0. ^ Chamberlin Donald D. (2001-10-03). ""Oral history interview with Donald D. Chamberlin"". Retrieved 2020-01-14. We changed the original name ""SEQUEL"" to SQL because we got a letter from somebody’s lawyer that said the name ""SEQUEL"" belonged to them. We shortened it to SQL for Structured Query Language and the product was known as SQL/DS. ^ SQL-92 4.22 SQL-statements 4.22.1 Classes of SQL-statements ""There are at least five ways of classifying SQL-statements:"" 4.22.2 SQL statements classified by function ""The following are the main classes of SQL-statements:""; SQL:2003 4.11 SQL-statements and later revisions. ^ Chatham Mark (2012). Structured Query Language By Example - Volume I: Data Query Language. p. 8. ISBN 978-1-29119951-2. ^ Codd Edgar F. (June 1970). ""A Relational Model of Data for Large Shared Data Banks"". Communications of the ACM. 13 (6): 377–87. CiteSeerX 10.1.1.88.646. doi:10.1145/362384.362685. S2CID 207549016. ^ a b Chapple Mike. ""SQL Fundamentals"". Databases. About.com. Retrieved 2009-01-28. ^ ""Structured Query Language (SQL)"". International Business Machines. October 27 2006. Retrieved 2007-06-10. ^ a b ""ISO 9075:1987: Information technology – Database languages – SQL – Part 1: Framework (SQL/Framework)"". 1987-06-01. ^ a b c d e f Chamberlin Donald (2012). ""Early History of SQL"". IEEE Annals of the History of Computing. 34 (4): 78–82. doi:10.1109/MAHC.2012.61. S2CID 1322572. ^ a b c Chamberlin Donald D; Boyce Raymond F (1974). ""SEQUEL: A Structured English Query Language"" (PDF). Proceedings of the 1974 ACM SIGFIDET Workshop on Data Description Access and Control. Association for Computing Machinery: 249–64. Archived from the original (PDF) on 2007-09-26. Retrieved 2007-06-09. ^ a b Oppel Andy (February 27 2004). Databases Demystified. San Francisco CA: McGraw-Hill Osborne Media. pp. 90–1. ISBN 978-0-07-146960-9. ^ ""History of IBM 1978"". IBM Archives. IBM. Retrieved 2007-06-09. ^ ""ISO - ISO/IEC JTC 1/SC 32 - Data management and interchange"". www.iso.org. Retrieved 2 January 2021. ^ ANSI/ISO/IEC International Standard (IS). Database Language SQL—Part 2: Foundation (SQL/Foundation). 1999. ^ ""IBM PureData System for Analytics Version 7.0.3"". ^ ""Invantive Procedural SQL"". ^ ""CREATE PROCEDURE"". MariaDB KnowledgeBase. Retrieved 2019-04-23. ^ PostgreSQL contributors (2011). ""PostgreSQL server programming"". PostgreSQL 9.1 official documentation. postgresql.org. Retrieved 2012-03-09. ^ PostgreSQL contributors (2012). ""About PostgreSQL"". PostgreSQL 9.1 official website. PostgreSQL Global Development Group. Retrieved March 9 2012. PostgreSQL prides itself in standards compliance. Its SQL implementation strongly conforms to the ANSI-SQL:2008 standard ^ ""Mimer SQL Built on Standards"". Mimer SQL official website. Mimer Information Technology. 2009. ^ ""4.1. Lexical Structure"". PostgreSQL documentation. 2018. ^ ""(Second Informal Review Draft) ISO/IEC 9075:1992 Database Language SQL Section 5.2 syntax rule 11"". 30 July 1992. ^ Lorentz Diana; Roeser Mary Beth; Abraham Sundeep; Amor Angela; Arora Geeta; Arora Vikas; Ashdown Lance; Baer Hermann; Bellamkonda Shrikanth (October 2010) [1996]. ""Basic Elements of Oracle SQL: Data Types"". Oracle Database SQL Language Reference 11g Release 2 (11.2). Oracle Database Documentation Library. Redwood City CA: Oracle USA Inc. Retrieved December 29 2010. For each DATE value Oracle stores the following information: century year month date hour minute and second ^ Lorentz Diana; Roeser Mary Beth; Abraham Sundeep; Amor Angela; Arora Geeta; Arora Vikas; Ashdown Lance; Baer Hermann; Bellamkonda Shrikanth (October 2010) [1996]. ""Basic Elements of Oracle SQL: Data Types"". Oracle Database SQL Language Reference 11g Release 2 (11.2). Oracle Database Documentation Library. Redwood City CA: Oracle USA Inc. Retrieved December 29 2010. The datetime data types are DATE... ^ Lorentz Diana; Roeser Mary Beth; Abraham Sundeep; Amor Angela; Arora Geeta; Arora Vikas; Ashdown Lance; Baer Hermann; Bellamkonda Shrikanth (October 2010) [1996]. ""Basic Elements of Oracle SQL: Data Types"". Oracle Database SQL Language Reference 11g Release 2 (11.2). Oracle Database Documentation Library. Redwood City CA: Oracle USA Inc. Retrieved December 29 2010. Do not define columns with the following SQL/DS and DB2 data types because they have no corresponding Oracle data type:... TIME ^ ""Finding Aid"". X3H2 Records 1978–95. American National Standards Institute. ^ Doll Shelley (June 19 2002). ""Is SQL a Standard Anymore?"". TechRepublic's Builder.com. TechRepublic. Archived from the original on 2012-07-05. Retrieved 2016-04-12. ^ a b Gillespie Patrick. ""Pronouncing SQL: S-Q-L or Sequel?"". Retrieved 12 February 2012. ^ Melton Jim; Alan R Simon (1993). ""1.2. What is SQL?"". Understanding the New SQL: A Complete Guide. Morgan Kaufmann. p. 536. ISBN 978-1-55860-245-8. SQL (correctly pronounced ""ess cue ell "" instead of the somewhat common ""sequel"")... ^ a b Wagner Michael (2010). SQL/XML:2006 - Evaluierung der Standardkonformität ausgewählter Datenbanksysteme. Diplomica Verlag. p. 100. ISBN 978-3-8366-9609-8. ^ ""SQL:2008 now an approved ISO international standard"". Sybase. July 2008. Archived from the original on 2011-06-28. ^ Krishna Kulkarni Jan-Eike Michels (September 2012). ""Temporal features in SQL:2011"" (PDF). SIGMOD Record. 41 (3). ^ Fred Zemke (2012). ""What's new in SQL:2011"" (PDF). Oracle Corporation. ^ ""ISO/IEC 9075-2:2016: Information technology -- Database languages -- SQL -- Part 2: Foundation (SQL/Foundation)"". December 2016. ^ SQL:2008 draft (Zip) Whitemarsh Information Systems Corporation ^ ""ISO/IEC 9075-1:2016: Information technology – Database languages – SQL – Part 1: Framework (SQL/Framework)"". ^ ISO/IEC 9075-11:2008: Information and Definition Schemas (SQL/Schemata) ^ Fernando Saenz-Perez. ""Outer Joins in a Deductive Database System"" (PDF). Lbd.udc.es. Retrieved 2017-01-16. ^ Reinsch R. (1988). ""Distributed database for SAA"". IBM Systems Journal. 27 (3): 362–389. doi:10.1147/sj.273.0362. ^ Distributed Relational Database Architecture Reference. IBM Corp. SC26-4651-0. 1990. ^ ""Khan Academy | Free Online Courses Lessons & Practice"". Khan Academy. Retrieved 2020-05-29. ^ Schauder Jen. ""Why SQL Sucks"". Schauderhaft. Retrieved 3 February 2018. Sources[edit] Codd Edgar F (June 1970). ""A Relational Model of Data for Large Shared Data Banks"". Communications of the ACM. 13 (6): 377–87. doi:10.1145/362384.362685. S2CID 207549016. Archived from the original on 2007-06-12. Discussion on alleged SQL flaws (C2 wiki) C. J. Date with Hugh Darwen: A Guide to the SQL standard : a users guide to the standard database language SQL 4th ed. Addison Wesley USA 1997 ISBN 978-0-201-96426-4 SQL standards documents[edit] ITTF publicly available standards and technical reports[edit] The ISO/IEC Information Technology Task Force publishes publicly available standards including SQL. Technical Corrigenda (corrections) and Technical Reports (discussion documents) are published there. SQL -- Part 1: Framework (SQL/Framework) Draft documents[edit] Formal SQL standards are available from ISO and ANSI for a fee. For informative use as opposed to strict standards compliance late drafts often suffice. SQL:2011 draft SQL-92 draft External links[edit] SQLat Wikipedia's sister projectsDefinitions from WiktionaryMedia from Wikimedia CommonsTextbooks from WikibooksResources from Wikiversity 1995 SQL Reunion: People Projects and Politics by Paul McJones (ed.): transcript of a reunion meeting devoted to the personal history of relational databases and SQL. American National Standards Institute. X3H2 Records 1978–1995 Charles Babbage Institute Collection documents the H2 committee's development of the NDL and SQL standards. Oral history interview with Donald D. Chamberlin Charles Babbage Institute In this oral history Chamberlin recounts his early life his education at Harvey Mudd College and Stanford University and his work on relational database technology. Chamberlin was a member of the System R research team and with Raymond F. Boyce developed the SQL database language. Chamberlin also briefly discusses his more recent research on XML query languages. Comparison of Different SQL Implementations This comparison of various SQL implementations is intended to serve as a guide to those interested in porting SQL code between various RDBMS products and includes comparisons between SQL:2008 PostgreSQL DB2 MS SQL Server MySQL Oracle and Informix. Event stream processing with SQL - An introduction to real-time processing of streaming data with continuous SQL queries BNF Grammar for ISO/IEC 9075:2003 part 2 SQL/Framework vteSQLVersions SQL-86 SQL-89 SQL-92 SQL:1999 SQL:2003 SQL:2006 SQL:2008 SQL:2011 SQL:2016 Keywords As Case Create Delete From Group by Having Insert Join Merge Null Order by Prepare Select Truncate Union Update Where With Related Edgar Codd Relational database ISO/IEC SQL parts Framework Foundation Call-Level Interface Persistent Stored Modules Management of External Data Object Language Bindings Information and Definition Schemas SQL Routines and Types for the Java Programming Language XML-Related Specifications vteDatabase management systemsTypes Object-oriented comparison Relational list comparison Key-value Column-oriented list Document-oriented Wide column store Graph NoSQL NewSQL In-memory list Multi-model comparison Cloud Concepts Database ACID Armstrong's axioms Codd's 12 rules CAP theorem CRUD Null Candidate key Foreign key Superkey Surrogate key Unique key Objects Relation table column row View Transaction Transaction log Trigger Index Stored procedure Cursor Partition Components Concurrency control Data dictionary JDBC XQJ ODBC Query language Query optimizer Query rewriting system Query plan Functions Administration Query optimization Replication Sharding Related topics Database models Database normalization Database storage Distributed database Federated database system Referential integrity Relational algebra Relational calculus Relational database Relational model Object-relational database Transaction processing Category Outline WikiProject vteQuery languagesIn current use .QL ALPHA CQL Cypher D DMX Datalog GraphQL Gremlin ISBL LDAP LINQ MQL MDX OQL OCL QUEL SMARTS SPARQL SQL XQuery XPath YQL Proprietary YQL LINQ Superseded CODASYL vteIBMHistory History of IBM Mergers and acquisitions Think (motto) Operating Systems Products IBM Cloud IBM Cognos Analytics IBM Planning Analytics Watson Cell microprocessor Power Systems Personal Computer Mainframe Information Management Software Lotus Software Rational Software SPSS ILOG Tivoli Software: Service Automation Manager WebSphere alphaWorks Criminal Reduction Utilising Statistical History Mashup Center PureQuery Redbooks FlashSystem Fortran Connections Q System One Business entities Center for The Business of Government Global Services Red Hat International subsidiaries jStart Research The Weather Company (Weather Underground) Facilities Towers 1250 René-Lévesque Montreal QC One Atlantic Center Atlanta GA Software Labs Rome Software Lab Toronto Software Lab IBM Buildings 330 North Wabash Chicago IL Johannesburg Seattle Facilities Thomas J. Watson Research Center Hakozaki Facility Yamato Facility Cambridge Scientific Center IBM Hursley Canada Head Office Building IBM Rochester Initiatives Academy of Technology Deep Thunder IBM Fellow The Great Mind Challenge Developer: Develothon Linux Technology Center IBM Virtual Universe Community Smarter Planet World Community Grid Inventions Automated teller machine Electronic keypunch Hard disk drive Floppy disk DRAM Relational model Selectric typewriter Financial swaps Universal Product Code Magnetic stripe card Sabre airline reservation system Scanning tunneling microscope Terminology Globally integrated enterprise Commercial Processing Workload Consumability e-business CEOs Thomas J. Watson (1914–1956) Thomas Watson Jr. (1956–1971) T. Vincent Learson (1971–1973) Frank T. Cary (1973–1981) John R. Opel (1981–1985) John Fellows Akers (1985–1993) Louis V. Gerstner Jr. (1993–2002) Samuel J. Palmisano (2002–2011) Ginni Rometty (2012–2020) Arvind Krishna (2020–present) Board of directors Michael L. Eskew David Farr Alex Gorsky Michelle J. Howard Arvind Krishna Andrew N. Liveris Martha E. Pollack Virginia M. Rometty Joseph R. Swedish Sidney Taurel Peter R. Voser Other A Boy and His Atom Common Public License/IBM Public License Customer engineer Deep Blue Deep Thought Dynamic infrastructure GUIDE International IBM and the Holocaust IBM international chess tournament Lucifer cipher Mathematica IBM Plex SHARE computing ScicomP Q Experience Sports teams American football Rugby union GlobalFoundries vteISO standards by standard numberList of ISO standards / ISO romanizations / IEC standards1–9999 1 2 3 4 5 6 7 9 16 17 31 -0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 68-1 128 216 217 226 228 233 259 261 262 269 302 306 361 428 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1073-2 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9496 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10005 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10303 -11 -21 -22 -28 -238 10383 10487 10585 10589 10646 10664 10746 10861 10957 10962 10967 11073 11170 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 (-2) 11941 11941 (TR) 11992 12006 12182 12207 12234-2 12620 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 13816 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14644 14649 14651 14698 14750 14764 14882 14971 15022 15189 15288 15291 15292 15398 15408 15444 -3 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 16023 16262 16355-1 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17799 18000 18004 18014 18245 18629 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000+ 20000 20022 20121 20400 21000 21047 21500 21827 22000 22300 22395 23270 23271 23360 24517 24613 24617 24707 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30170 31000 32000 37001 38500 40500 42010 45001 50001 55000 80000 -1 Category Authority control BNE: XX531785 BNF: cb12101816f (data) GND: 4134010-3 LCCN: sh86006628 Computer programming portal Retrieved from ""https://en.wikipedia.org/w/index.php?title=SQL&oldid=1002447404"" Categories: Database management systemsSQLData modeling languagesDeclarative programming languagesProgramming languages with an ISO standardQuery languagesRelational database management systemsData-centric programming languagesProgramming languages created in 1974Hidden categories: Articles with short descriptionShort description is different from WikidataArticles with hAudio microformatsPages including recorded pronunciationsAll articles with unsourced statementsArticles with unsourced statements from February 2013Articles with unsourced statements from July 2012Pages using Sister project links with wikidata mismatchPages using Sister project links with hidden wikidataPages using Sister project links with default searchWikipedia articles with BNE identifiersWikipedia articles with BNF identifiersWikipedia articles with GND identifiersWikipedia articles with LCCN identifiersArticles with example SQL code",d9b660ed4dddb0a9
7abb92702b0f74a0,B,https://en.wikipedia.org/wiki/B_(programming_language),"B (programming language) From Wikipedia the free encyclopedia Jump to navigation Jump to search Procedural programming language This article is about a language developed at Bell Labs. For ""b"" language of Meertens and Pemberton see ABC (programming language). For other uses see B (disambiguation). BDesigned byKen ThompsonDeveloperKen Thompson Dennis RitchieFirst appeared1969; 52 years ago (1969)[1]Typing disciplinetypeless (everything is a word)Filename extensions.bInfluenced byBCPL PL/I TMGInfluencedC B is a programming language developed at Bell Labs circa 1969. It is the work of Ken Thompson with Dennis Ritchie. B was derived from BCPL and its name may be a contraction of BCPL. Thompson's coworker Dennis Ritchie speculated that the name might be based on Bon an earlier but unrelated programming language that Thompson designed for use on Multics.[note 1] B was designed for recursive non-numeric machine-independent applications such as system and language software.[3] It was a typeless language with the only data type being the underlying machine's natural memory word format whatever that might be. Depending on the context the word was treated either as an integer or a memory address. As machines with ASCII processing became common notably the DEC PDP-11 that arrived at Bell support for character data stuffed in memory words became important. The typeless nature of the language was seen as a disadvantage which led Thompson and Ritchie to develop an expanded version of the language supporting new internal and user-defined types which became the C programming language. Contents 1 History 2 Examples 3 See also 4 Notes 5 References 6 External links History[edit] Circa 1969 Ken Thompson[2] and later Dennis Ritchie[3] developed B basing it mainly on the BCPL language Thompson used in the Multics project. B was essentially the BCPL system stripped of any component Thompson felt he could do without in order to make it fit within the memory capacity of the minicomputers of the time. The BCPL to B transition also included changes made to suit Thompson's preferences (mostly along the lines of reducing the number of non-whitespace characters in a typical program).[2] Much of the typical ALGOL-like syntax of BCPL was rather heavily changed in this process. The assignment operator := changed to = and the equality operator = was replaced by ==. Thompson added ""two-address assignment operators"" using x =+ y syntax to add y to x (in C the operator is written +=). This syntax came from Douglas McIlroy's implementation of TMG in which B's compiler was first implemented (and it came to TMG from ALGOL 68's x +:= y syntax).[2][4] Thompson went further by inventing the increment and decrement operators (++ and --). Their prefix or postfix position determines whether the value is taken before or after alteration of the operand. This innovation was not in the earliest versions of B. According to Dennis Ritchie people often assumed that they were created for the auto-increment and auto-decrement address modes of the DEC PDP-11 but this is historically impossible as the machine didn't exist when B was first developed.[2] The semicolon version of the for loop was borrowed by Ken Thompson from the work of Stephen Johnson.[5] B is typeless or more precisely has one data type: the computer word. Most operators (e.g. + - * /) treated this as an integer but others treated it as a memory address to be dereferenced. In many other ways it looked a lot like an early version of C. There are a few library functions including some that vaguely resemble functions from the standard I/O library in C.[3] In Thompson's words: ""B and the old old C were very very similar languages except for all the types [in C]"".[5] Early implementations were for the DEC PDP-7 and PDP-11 minicomputers using early Unix and Honeywell GE 645[6] 36-bit mainframes running the operating system GCOS. The earliest PDP-7 implementations compiled to threaded code and Ritchie wrote a compiler using TMG which produced machine code.[7][8][9] In 1970 a PDP-11 was acquired and threaded code was used for the port; an assembler dc and the B language itself were written in B to bootstrap the computer. An early version of yacc was produced with this PDP-11 configuration. Ritchie took over maintenance during this period.[2][9] The typeless nature of B made sense on the Honeywell PDP-7 and many older computers but was a problem on the PDP-11 because it was difficult to elegantly access the character data type that the PDP-11 and most modern computers fully support. Starting in 1971 Ritchie made changes to the language while converting its compiler to produce machine code most notably adding data typing for variables. During 1971 and 1972 B evolved into ""New B"" (NB) and then C.[2] B is almost extinct having been superseded by the C language.[10] However it continues to see use on GCOS mainframes (as of 2014[update])[11] and on certain embedded systems (as of 2000[update]) for a variety of reasons: limited hardware in small systems extensive libraries tooling licensing cost issues and simply being good enough for the job.[10] The highly influential AberMUD was originally written in B. Examples[edit] The following examples are from the Users' Reference to B by Ken Thompson:[3] /* The following function will print a non-negative number n to the base b where 2<=b<=10. This routine uses the fact that in the ASCII character set the digits 0 to 9 have sequential code values. */ printn(n b) { extrn putchar; auto a; /* Wikipedia note: auto declares a variable with automatic storage (lifetime is function scope) not ""automatic typing"" as in C++11. */ if (a = n / b) /* assignment not test for equality */ printn(a b); /* recursive */ putchar(n % b + '0'); } /* The following program will calculate the constant e-2 to about 4000 decimal digits and print it 50 characters to the line in groups of 5 characters. The method is simple output conversion of the expansion 1/2! + 1/3! + ... = .111.... where the bases of the digits are 2 3 4 . . . */ main() { extrn putchar n v; auto i c col a; i = col = 0; while(i<n) v[i++] = 1; while(col<2*n) { a = n+1 ; c = i = 0; while (i<n) { c =+ v[i] *10; v[i++] = c%a; c =/ a--; } putchar(c+'0'); if(!(++col%5)) putchar(col%50?' ': '*n'); } putchar('*n*n'); } v[2000]; n 2000; See also[edit] Computer programming portal Notes[edit] ^ ""Its name most probably represents a contraction of BCPL though an alternate theory holds that it derives from Bon [Thompson 69] an unrelated language created by Thompson during the Multics days. Bon in turn was named either after his wife Bonnie or (according to an encyclopedia quotation in its manual) after a religion whose rituals involve the murmuring of magic formulas.""[2] References[edit] ^ ""B - computer programming language"". ^ a b c d e f g Ritchie Dennis M. (March 1993). ""The Development of the C Language"". ACM SIGPLAN Notices. 28 (3): 201–208. doi:10.1145/155360.155580. ^ a b c d Thompson Ken (7 January 1972). ""Users' Reference to B"" (PDF). Bell Laboratories. Archived from the original (PDF) on 17 March 2015. Retrieved 21 March 2014. ^ Michael S. Mahoney (18 August 1989). ""Interview with M.D. McIlroy"". Princeton.edu. Murray Hill. ^ a b Ken Thompson. ""VCF East 2019 -- Brian Kernighan interviews Ken Thompson"". Retrieved 2020-11-16. I saw Johnson's semicolon version of the for loop and I put that in [B] I stole it. ^ Ritchie Dennis M. (1984). ""The Evolution of the Unix Time-sharing System"". AT&T Bell Laboratories Technical Journal. 63 (6 Part 2): 1577–1593. Archived from the original on 11 June 2015. ^ ""TMG"". multicians.org. ^ Ritchie Dennis M. ""The Development of the C Language"". Bell Labs/Lucent Technologies. Archived from the original on 11 June 2015. ^ a b McIlroy M. D. (1987). A Research Unix reader: annotated excerpts from the Programmer's Manual 1971–1986 (PDF) (Technical report). CSTR. Bell Labs. 139. ^ a b Johnson and Kernighan. ""THE PROGRAMMING LANGUAGE B"". Bell Laboratories. Archived from the original on 11 June 2015. Retrieved 21 March 2014. ^ ""Thinkage UW Tools Package"". Thinkage Ltd. Retrieved 26 March 2014. External links[edit] Manual page for b(1) from Unix First Edition The Development of the C Language Dennis M. Ritchie. Puts B in the context of BCPL and C. Users' Reference to B Ken Thompson. Describes the PDP-11 version. The Programming Language B S. C. Johnson & B. W. Kernighan Technical Report CS TR 8 Bell Labs (January 1973). The GCOS version on Honeywell equipment. B Language Reference Manual Thinkage Ltd. The production version of the language as used on GCOS including language and runtime library. vteKen ThompsonOperating systems Unix Plan 9 from Bell Labs Inferno Programming languages B Bon Go Software Belle ed grep sam Space Travel Thompson shell Other UTF-8 vteProgramming languages Comparison Timeline History ALGOL APL Assembly BASIC C C++ C# COBOL Go Erlang Forth Fortran Haskell Java JavaScript Kotlin Lisp ML Objective-C Pascal Perl PHP Prolog Python R Ruby Rust SQL Shell Simula Smalltalk Swift more... Category Lists: Alphabetical Categorical Generational Non-English-based Retrieved from ""https://en.wikipedia.org/w/index.php?title=B_(programming_language)&oldid=997812640"" Categories: Procedural programming languagesProgramming languagesProgramming languages created in 1969Hidden categories: Articles with short descriptionShort description matches WikidataArticles containing potentially dated statements from 2014All articles containing potentially dated statementsArticles containing potentially dated statements from 2000",ef2385f729d7871f,3653ceefecb816c4